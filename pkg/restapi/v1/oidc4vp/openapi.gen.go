// Package oidc4vp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oidc4vp

import (
	"github.com/labstack/echo/v4"
)

// PresentAuthorizationResponseFormdataBody defines parameters for PresentAuthorizationResponse.
type PresentAuthorizationResponseFormdataBody struct {
	// Error Authorization response error code
	Error *string `form:"error" json:"error"`

	// ErrorDescription Authorization response error description
	ErrorDescription *string `form:"error_description" json:"error_description"`

	// IdToken ID Token serves as an authentication receipt and includes metadata about the VP Token.
	IdToken *string `form:"id_token" json:"id_token"`

	// State State from authorization request for correlation
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// VpToken VP Token includes one or more Verifiable Presentations.
	VpToken *string `form:"vp_token" json:"vp_token"`
}

// PresentAuthorizationResponseFormdataRequestBody defines body for PresentAuthorizationResponse for application/x-www-form-urlencoded ContentType.
type PresentAuthorizationResponseFormdataRequestBody PresentAuthorizationResponseFormdataBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Used to submit authorization response to verifier through VCS
	// (POST /oidc/present)
	PresentAuthorizationResponse(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PresentAuthorizationResponse converts echo context to params.
func (w *ServerInterfaceWrapper) PresentAuthorizationResponse(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PresentAuthorizationResponse(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/oidc/present", wrapper.PresentAuthorizationResponse)

}
