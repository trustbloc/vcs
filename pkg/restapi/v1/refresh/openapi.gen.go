// Package refresh provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package refresh

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// CredentialRefreshAvailableResponse Model for Credential Update Response.
type CredentialRefreshAvailableResponse struct {
	VerifiablePresentationRequest VerifiablePresentationRequest `json:"verifiablePresentationRequest"`
}

// GetRefreshedCredentialReq Model for getting refreshed credential.
type GetRefreshedCredentialReq struct {
	// VerifiablePresentation Verifiable Presentation.
	VerifiablePresentation []byte `json:"verifiable_presentation"`
}

// GetRefreshedCredentialResp Model for getting refreshed credential.
type GetRefreshedCredentialResp struct {
	IssuerURI            string `json:"issuerURI"`
	VerifiableCredential any    `json:"verifiable_credential"`
}

// RefreshService defines model for RefreshService.
type RefreshService struct {
	// ServiceEndpoint Service endpoint.
	ServiceEndpoint string `json:"serviceEndpoint"`

	// Type Service type.
	Type string `json:"type"`
}

// RefreshServiceInteract defines model for RefreshServiceInteract.
type RefreshServiceInteract struct {
	Service []RefreshService `json:"service"`
}

// VerifiablePresentationRequest defines model for VerifiablePresentationRequest.
type VerifiablePresentationRequest struct {
	// Challenge Challenge value.
	Challenge string `json:"challenge"`

	// Domain Domain value.
	Domain   string                 `json:"domain"`
	Interact RefreshServiceInteract `json:"interact"`

	// Query Credential Presentation Query.
	Query map[string]interface{} `json:"query"`
}

// RequestRefreshStatusParams defines parameters for RequestRefreshStatus.
type RequestRefreshStatusParams struct {
	// CredentialID Credential ID
	CredentialID string `form:"credentialID" json:"credentialID"`
}

// GetRefreshedCredentialParams defines parameters for GetRefreshedCredential.
type GetRefreshedCredentialParams struct {
	// CredentialID Credential ID
	CredentialID string `form:"credentialID" json:"credentialID"`
}

// GetRefreshedCredentialJSONRequestBody defines body for GetRefreshedCredential for application/json ContentType.
type GetRefreshedCredentialJSONRequestBody = GetRefreshedCredentialReq

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get refresh status for credential.
	// (GET /refresh/{profileID}/{profileVersion})
	RequestRefreshStatus(ctx echo.Context, profileID string, profileVersion string, params RequestRefreshStatusParams) error
	// Receive updated (refreshed) credentials.
	// (POST /refresh/{profileID}/{profileVersion})
	GetRefreshedCredential(ctx echo.Context, profileID string, profileVersion string, params GetRefreshedCredentialParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RequestRefreshStatus converts echo context to params.
func (w *ServerInterfaceWrapper) RequestRefreshStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileID" -------------
	var profileID string

	err = runtime.BindStyledParameterWithOptions("simple", "profileID", ctx.Param("profileID"), &profileID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileID: %s", err))
	}

	// ------------- Path parameter "profileVersion" -------------
	var profileVersion string

	err = runtime.BindStyledParameterWithOptions("simple", "profileVersion", ctx.Param("profileVersion"), &profileVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileVersion: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params RequestRefreshStatusParams
	// ------------- Required query parameter "credentialID" -------------

	err = runtime.BindQueryParameter("form", true, true, "credentialID", ctx.QueryParams(), &params.CredentialID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestRefreshStatus(ctx, profileID, profileVersion, params)
	return err
}

// GetRefreshedCredential converts echo context to params.
func (w *ServerInterfaceWrapper) GetRefreshedCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileID" -------------
	var profileID string

	err = runtime.BindStyledParameterWithOptions("simple", "profileID", ctx.Param("profileID"), &profileID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileID: %s", err))
	}

	// ------------- Path parameter "profileVersion" -------------
	var profileVersion string

	err = runtime.BindStyledParameterWithOptions("simple", "profileVersion", ctx.Param("profileVersion"), &profileVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileVersion: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRefreshedCredentialParams
	// ------------- Required query parameter "credentialID" -------------

	err = runtime.BindQueryParameter("form", true, true, "credentialID", ctx.QueryParams(), &params.CredentialID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRefreshedCredential(ctx, profileID, profileVersion, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/refresh/:profileID/:profileVersion", wrapper.RequestRefreshStatus)
	router.POST(baseURL+"/refresh/:profileID/:profileVersion", wrapper.GetRefreshedCredential)

}
