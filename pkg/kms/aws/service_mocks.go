// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package aws is a generated GoMock package.
package aws

import (
	context "context"
	reflect "reflect"
	time "time"

	kms "github.com/aws/aws-sdk-go-v2/service/kms"
	gomock "github.com/golang/mock/gomock"
)

// MockawsClient is a mock of awsClient interface.
type MockawsClient struct {
	ctrl     *gomock.Controller
	recorder *MockawsClientMockRecorder
}

// MockawsClientMockRecorder is the mock recorder for MockawsClient.
type MockawsClientMockRecorder struct {
	mock *MockawsClient
}

// NewMockawsClient creates a new mock instance.
func NewMockawsClient(ctrl *gomock.Controller) *MockawsClient {
	mock := &MockawsClient{ctrl: ctrl}
	mock.recorder = &MockawsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockawsClient) EXPECT() *MockawsClientMockRecorder {
	return m.recorder
}

// CreateAlias mocks base method.
func (m *MockawsClient) CreateAlias(ctx context.Context, params *kms.CreateAliasInput, optFns ...func(*kms.Options)) (*kms.CreateAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAlias", varargs...)
	ret0, _ := ret[0].(*kms.CreateAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlias indicates an expected call of CreateAlias.
func (mr *MockawsClientMockRecorder) CreateAlias(ctx, params interface{}, optFns ...interface{}) *awsClientCreateAliasCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlias", reflect.TypeOf((*MockawsClient)(nil).CreateAlias), varargs...)
	return &awsClientCreateAliasCall{Call: call}
}

// awsClientCreateAliasCall wrap *gomock.Call
type awsClientCreateAliasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *awsClientCreateAliasCall) Return(arg0 *kms.CreateAliasOutput, arg1 error) *awsClientCreateAliasCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *awsClientCreateAliasCall) Do(f func(context.Context, *kms.CreateAliasInput, ...func(*kms.Options)) (*kms.CreateAliasOutput, error)) *awsClientCreateAliasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *awsClientCreateAliasCall) DoAndReturn(f func(context.Context, *kms.CreateAliasInput, ...func(*kms.Options)) (*kms.CreateAliasOutput, error)) *awsClientCreateAliasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateKey mocks base method.
func (m *MockawsClient) CreateKey(ctx context.Context, params *kms.CreateKeyInput, optFns ...func(*kms.Options)) (*kms.CreateKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKey", varargs...)
	ret0, _ := ret[0].(*kms.CreateKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey.
func (mr *MockawsClientMockRecorder) CreateKey(ctx, params interface{}, optFns ...interface{}) *awsClientCreateKeyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockawsClient)(nil).CreateKey), varargs...)
	return &awsClientCreateKeyCall{Call: call}
}

// awsClientCreateKeyCall wrap *gomock.Call
type awsClientCreateKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *awsClientCreateKeyCall) Return(arg0 *kms.CreateKeyOutput, arg1 error) *awsClientCreateKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *awsClientCreateKeyCall) Do(f func(context.Context, *kms.CreateKeyInput, ...func(*kms.Options)) (*kms.CreateKeyOutput, error)) *awsClientCreateKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *awsClientCreateKeyCall) DoAndReturn(f func(context.Context, *kms.CreateKeyInput, ...func(*kms.Options)) (*kms.CreateKeyOutput, error)) *awsClientCreateKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Decrypt mocks base method.
func (m *MockawsClient) Decrypt(ctx context.Context, params *kms.DecryptInput, optFns ...func(*kms.Options)) (*kms.DecryptOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Decrypt", varargs...)
	ret0, _ := ret[0].(*kms.DecryptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockawsClientMockRecorder) Decrypt(ctx, params interface{}, optFns ...interface{}) *awsClientDecryptCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockawsClient)(nil).Decrypt), varargs...)
	return &awsClientDecryptCall{Call: call}
}

// awsClientDecryptCall wrap *gomock.Call
type awsClientDecryptCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *awsClientDecryptCall) Return(arg0 *kms.DecryptOutput, arg1 error) *awsClientDecryptCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *awsClientDecryptCall) Do(f func(context.Context, *kms.DecryptInput, ...func(*kms.Options)) (*kms.DecryptOutput, error)) *awsClientDecryptCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *awsClientDecryptCall) DoAndReturn(f func(context.Context, *kms.DecryptInput, ...func(*kms.Options)) (*kms.DecryptOutput, error)) *awsClientDecryptCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DescribeKey mocks base method.
func (m *MockawsClient) DescribeKey(ctx context.Context, params *kms.DescribeKeyInput, optFns ...func(*kms.Options)) (*kms.DescribeKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeKey", varargs...)
	ret0, _ := ret[0].(*kms.DescribeKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKey indicates an expected call of DescribeKey.
func (mr *MockawsClientMockRecorder) DescribeKey(ctx, params interface{}, optFns ...interface{}) *awsClientDescribeKeyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKey", reflect.TypeOf((*MockawsClient)(nil).DescribeKey), varargs...)
	return &awsClientDescribeKeyCall{Call: call}
}

// awsClientDescribeKeyCall wrap *gomock.Call
type awsClientDescribeKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *awsClientDescribeKeyCall) Return(arg0 *kms.DescribeKeyOutput, arg1 error) *awsClientDescribeKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *awsClientDescribeKeyCall) Do(f func(context.Context, *kms.DescribeKeyInput, ...func(*kms.Options)) (*kms.DescribeKeyOutput, error)) *awsClientDescribeKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *awsClientDescribeKeyCall) DoAndReturn(f func(context.Context, *kms.DescribeKeyInput, ...func(*kms.Options)) (*kms.DescribeKeyOutput, error)) *awsClientDescribeKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Encrypt mocks base method.
func (m *MockawsClient) Encrypt(ctx context.Context, params *kms.EncryptInput, optFns ...func(*kms.Options)) (*kms.EncryptOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Encrypt", varargs...)
	ret0, _ := ret[0].(*kms.EncryptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockawsClientMockRecorder) Encrypt(ctx, params interface{}, optFns ...interface{}) *awsClientEncryptCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockawsClient)(nil).Encrypt), varargs...)
	return &awsClientEncryptCall{Call: call}
}

// awsClientEncryptCall wrap *gomock.Call
type awsClientEncryptCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *awsClientEncryptCall) Return(arg0 *kms.EncryptOutput, arg1 error) *awsClientEncryptCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *awsClientEncryptCall) Do(f func(context.Context, *kms.EncryptInput, ...func(*kms.Options)) (*kms.EncryptOutput, error)) *awsClientEncryptCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *awsClientEncryptCall) DoAndReturn(f func(context.Context, *kms.EncryptInput, ...func(*kms.Options)) (*kms.EncryptOutput, error)) *awsClientEncryptCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPublicKey mocks base method.
func (m *MockawsClient) GetPublicKey(ctx context.Context, params *kms.GetPublicKeyInput, optFns ...func(*kms.Options)) (*kms.GetPublicKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicKey", varargs...)
	ret0, _ := ret[0].(*kms.GetPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockawsClientMockRecorder) GetPublicKey(ctx, params interface{}, optFns ...interface{}) *awsClientGetPublicKeyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockawsClient)(nil).GetPublicKey), varargs...)
	return &awsClientGetPublicKeyCall{Call: call}
}

// awsClientGetPublicKeyCall wrap *gomock.Call
type awsClientGetPublicKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *awsClientGetPublicKeyCall) Return(arg0 *kms.GetPublicKeyOutput, arg1 error) *awsClientGetPublicKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *awsClientGetPublicKeyCall) Do(f func(context.Context, *kms.GetPublicKeyInput, ...func(*kms.Options)) (*kms.GetPublicKeyOutput, error)) *awsClientGetPublicKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *awsClientGetPublicKeyCall) DoAndReturn(f func(context.Context, *kms.GetPublicKeyInput, ...func(*kms.Options)) (*kms.GetPublicKeyOutput, error)) *awsClientGetPublicKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Sign mocks base method.
func (m *MockawsClient) Sign(ctx context.Context, params *kms.SignInput, optFns ...func(*kms.Options)) (*kms.SignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sign", varargs...)
	ret0, _ := ret[0].(*kms.SignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockawsClientMockRecorder) Sign(ctx, params interface{}, optFns ...interface{}) *awsClientSignCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockawsClient)(nil).Sign), varargs...)
	return &awsClientSignCall{Call: call}
}

// awsClientSignCall wrap *gomock.Call
type awsClientSignCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *awsClientSignCall) Return(arg0 *kms.SignOutput, arg1 error) *awsClientSignCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *awsClientSignCall) Do(f func(context.Context, *kms.SignInput, ...func(*kms.Options)) (*kms.SignOutput, error)) *awsClientSignCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *awsClientSignCall) DoAndReturn(f func(context.Context, *kms.SignInput, ...func(*kms.Options)) (*kms.SignOutput, error)) *awsClientSignCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Verify mocks base method.
func (m *MockawsClient) Verify(ctx context.Context, params *kms.VerifyInput, optFns ...func(*kms.Options)) (*kms.VerifyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Verify", varargs...)
	ret0, _ := ret[0].(*kms.VerifyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockawsClientMockRecorder) Verify(ctx, params interface{}, optFns ...interface{}) *awsClientVerifyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockawsClient)(nil).Verify), varargs...)
	return &awsClientVerifyCall{Call: call}
}

// awsClientVerifyCall wrap *gomock.Call
type awsClientVerifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *awsClientVerifyCall) Return(arg0 *kms.VerifyOutput, arg1 error) *awsClientVerifyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *awsClientVerifyCall) Do(f func(context.Context, *kms.VerifyInput, ...func(*kms.Options)) (*kms.VerifyOutput, error)) *awsClientVerifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *awsClientVerifyCall) DoAndReturn(f func(context.Context, *kms.VerifyInput, ...func(*kms.Options)) (*kms.VerifyOutput, error)) *awsClientVerifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockmetricsProvider is a mock of metricsProvider interface.
type MockmetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockmetricsProviderMockRecorder
}

// MockmetricsProviderMockRecorder is the mock recorder for MockmetricsProvider.
type MockmetricsProviderMockRecorder struct {
	mock *MockmetricsProvider
}

// NewMockmetricsProvider creates a new mock instance.
func NewMockmetricsProvider(ctrl *gomock.Controller) *MockmetricsProvider {
	mock := &MockmetricsProvider{ctrl: ctrl}
	mock.recorder = &MockmetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmetricsProvider) EXPECT() *MockmetricsProviderMockRecorder {
	return m.recorder
}

// DecryptCount mocks base method.
func (m *MockmetricsProvider) DecryptCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecryptCount")
}

// DecryptCount indicates an expected call of DecryptCount.
func (mr *MockmetricsProviderMockRecorder) DecryptCount() *metricsProviderDecryptCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptCount", reflect.TypeOf((*MockmetricsProvider)(nil).DecryptCount))
	return &metricsProviderDecryptCountCall{Call: call}
}

// metricsProviderDecryptCountCall wrap *gomock.Call
type metricsProviderDecryptCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *metricsProviderDecryptCountCall) Return() *metricsProviderDecryptCountCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *metricsProviderDecryptCountCall) Do(f func()) *metricsProviderDecryptCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *metricsProviderDecryptCountCall) DoAndReturn(f func()) *metricsProviderDecryptCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DecryptTime mocks base method.
func (m *MockmetricsProvider) DecryptTime(value time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecryptTime", value)
}

// DecryptTime indicates an expected call of DecryptTime.
func (mr *MockmetricsProviderMockRecorder) DecryptTime(value interface{}) *metricsProviderDecryptTimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptTime", reflect.TypeOf((*MockmetricsProvider)(nil).DecryptTime), value)
	return &metricsProviderDecryptTimeCall{Call: call}
}

// metricsProviderDecryptTimeCall wrap *gomock.Call
type metricsProviderDecryptTimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *metricsProviderDecryptTimeCall) Return() *metricsProviderDecryptTimeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *metricsProviderDecryptTimeCall) Do(f func(time.Duration)) *metricsProviderDecryptTimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *metricsProviderDecryptTimeCall) DoAndReturn(f func(time.Duration)) *metricsProviderDecryptTimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EncryptCount mocks base method.
func (m *MockmetricsProvider) EncryptCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EncryptCount")
}

// EncryptCount indicates an expected call of EncryptCount.
func (mr *MockmetricsProviderMockRecorder) EncryptCount() *metricsProviderEncryptCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptCount", reflect.TypeOf((*MockmetricsProvider)(nil).EncryptCount))
	return &metricsProviderEncryptCountCall{Call: call}
}

// metricsProviderEncryptCountCall wrap *gomock.Call
type metricsProviderEncryptCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *metricsProviderEncryptCountCall) Return() *metricsProviderEncryptCountCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *metricsProviderEncryptCountCall) Do(f func()) *metricsProviderEncryptCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *metricsProviderEncryptCountCall) DoAndReturn(f func()) *metricsProviderEncryptCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EncryptTime mocks base method.
func (m *MockmetricsProvider) EncryptTime(value time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EncryptTime", value)
}

// EncryptTime indicates an expected call of EncryptTime.
func (mr *MockmetricsProviderMockRecorder) EncryptTime(value interface{}) *metricsProviderEncryptTimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptTime", reflect.TypeOf((*MockmetricsProvider)(nil).EncryptTime), value)
	return &metricsProviderEncryptTimeCall{Call: call}
}

// metricsProviderEncryptTimeCall wrap *gomock.Call
type metricsProviderEncryptTimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *metricsProviderEncryptTimeCall) Return() *metricsProviderEncryptTimeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *metricsProviderEncryptTimeCall) Do(f func(time.Duration)) *metricsProviderEncryptTimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *metricsProviderEncryptTimeCall) DoAndReturn(f func(time.Duration)) *metricsProviderEncryptTimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExportPublicKeyCount mocks base method.
func (m *MockmetricsProvider) ExportPublicKeyCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExportPublicKeyCount")
}

// ExportPublicKeyCount indicates an expected call of ExportPublicKeyCount.
func (mr *MockmetricsProviderMockRecorder) ExportPublicKeyCount() *metricsProviderExportPublicKeyCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPublicKeyCount", reflect.TypeOf((*MockmetricsProvider)(nil).ExportPublicKeyCount))
	return &metricsProviderExportPublicKeyCountCall{Call: call}
}

// metricsProviderExportPublicKeyCountCall wrap *gomock.Call
type metricsProviderExportPublicKeyCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *metricsProviderExportPublicKeyCountCall) Return() *metricsProviderExportPublicKeyCountCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *metricsProviderExportPublicKeyCountCall) Do(f func()) *metricsProviderExportPublicKeyCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *metricsProviderExportPublicKeyCountCall) DoAndReturn(f func()) *metricsProviderExportPublicKeyCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExportPublicKeyTime mocks base method.
func (m *MockmetricsProvider) ExportPublicKeyTime(value time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExportPublicKeyTime", value)
}

// ExportPublicKeyTime indicates an expected call of ExportPublicKeyTime.
func (mr *MockmetricsProviderMockRecorder) ExportPublicKeyTime(value interface{}) *metricsProviderExportPublicKeyTimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPublicKeyTime", reflect.TypeOf((*MockmetricsProvider)(nil).ExportPublicKeyTime), value)
	return &metricsProviderExportPublicKeyTimeCall{Call: call}
}

// metricsProviderExportPublicKeyTimeCall wrap *gomock.Call
type metricsProviderExportPublicKeyTimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *metricsProviderExportPublicKeyTimeCall) Return() *metricsProviderExportPublicKeyTimeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *metricsProviderExportPublicKeyTimeCall) Do(f func(time.Duration)) *metricsProviderExportPublicKeyTimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *metricsProviderExportPublicKeyTimeCall) DoAndReturn(f func(time.Duration)) *metricsProviderExportPublicKeyTimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SignCount mocks base method.
func (m *MockmetricsProvider) SignCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignCount")
}

// SignCount indicates an expected call of SignCount.
func (mr *MockmetricsProviderMockRecorder) SignCount() *metricsProviderSignCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignCount", reflect.TypeOf((*MockmetricsProvider)(nil).SignCount))
	return &metricsProviderSignCountCall{Call: call}
}

// metricsProviderSignCountCall wrap *gomock.Call
type metricsProviderSignCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *metricsProviderSignCountCall) Return() *metricsProviderSignCountCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *metricsProviderSignCountCall) Do(f func()) *metricsProviderSignCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *metricsProviderSignCountCall) DoAndReturn(f func()) *metricsProviderSignCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SignTime mocks base method.
func (m *MockmetricsProvider) SignTime(value time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignTime", value)
}

// SignTime indicates an expected call of SignTime.
func (mr *MockmetricsProviderMockRecorder) SignTime(value interface{}) *metricsProviderSignTimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTime", reflect.TypeOf((*MockmetricsProvider)(nil).SignTime), value)
	return &metricsProviderSignTimeCall{Call: call}
}

// metricsProviderSignTimeCall wrap *gomock.Call
type metricsProviderSignTimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *metricsProviderSignTimeCall) Return() *metricsProviderSignTimeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *metricsProviderSignTimeCall) Do(f func(time.Duration)) *metricsProviderSignTimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *metricsProviderSignTimeCall) DoAndReturn(f func(time.Duration)) *metricsProviderSignTimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VerifyCount mocks base method.
func (m *MockmetricsProvider) VerifyCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VerifyCount")
}

// VerifyCount indicates an expected call of VerifyCount.
func (mr *MockmetricsProviderMockRecorder) VerifyCount() *metricsProviderVerifyCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCount", reflect.TypeOf((*MockmetricsProvider)(nil).VerifyCount))
	return &metricsProviderVerifyCountCall{Call: call}
}

// metricsProviderVerifyCountCall wrap *gomock.Call
type metricsProviderVerifyCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *metricsProviderVerifyCountCall) Return() *metricsProviderVerifyCountCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *metricsProviderVerifyCountCall) Do(f func()) *metricsProviderVerifyCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *metricsProviderVerifyCountCall) DoAndReturn(f func()) *metricsProviderVerifyCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VerifyTime mocks base method.
func (m *MockmetricsProvider) VerifyTime(value time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VerifyTime", value)
}

// VerifyTime indicates an expected call of VerifyTime.
func (mr *MockmetricsProviderMockRecorder) VerifyTime(value interface{}) *metricsProviderVerifyTimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTime", reflect.TypeOf((*MockmetricsProvider)(nil).VerifyTime), value)
	return &metricsProviderVerifyTimeCall{Call: call}
}

// metricsProviderVerifyTimeCall wrap *gomock.Call
type metricsProviderVerifyTimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *metricsProviderVerifyTimeCall) Return() *metricsProviderVerifyTimeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *metricsProviderVerifyTimeCall) Do(f func(time.Duration)) *metricsProviderVerifyTimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *metricsProviderVerifyTimeCall) DoAndReturn(f func(time.Duration)) *metricsProviderVerifyTimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
