{
  "@context": ["https://w3c.github.io/json-ld-api/tests/context.jsonld", {"@base": "frame-manifest"}],
  "@id": "",
  "@type": "mf:Manifest",
  "name": "Framing",
  "description": "JSON-LD Framing tests.",
  "baseIri": "https://w3c.github.io/json-ld-framing/tests/",
  "sequence": [
    {
      "@id": "#t0001",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Library framing example",
      "purpose": "Basic example used in playgrond and spec examples.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0001-in.jsonld",
      "frame": "frame/0001-frame.jsonld",
      "expect": "frame/0001-out.jsonld"
    }, {
      "@id": "#t0002",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "reframe w/extra CURIE value.",
      "purpose": "Append extra values to output.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0002-in.jsonld",
      "frame": "frame/0002-frame.jsonld",
      "expect": "frame/0002-out.jsonld"
    }, {
      "@id": "#t0003",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "reframe (null)",
      "purpose": "Do not match without a matching @type",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0003-in.jsonld",
      "frame": "frame/0003-frame.jsonld",
      "expect": "frame/0003-out.jsonld"
    }, {
      "@id": "#t0004",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "reframe (type)",
      "purpose": "Multiple matches on @type.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0004-in.jsonld",
      "frame": "frame/0004-frame.jsonld",
      "expect": "frame/0004-out.jsonld"
    }, {
      "@id": "#t0005",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "reframe (explicit)",
      "purpose": "If property is not in frame, and explicit is true, do not add any values for property to output.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0005-in.jsonld",
      "frame": "frame/0005-frame.jsonld",
      "expect": "frame/0005-out.jsonld"
    }, {
      "@id": "#t0006",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "reframe (non-explicit)",
      "purpose": "Unless the explicit is false, processors append extra values to output.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0006-in.jsonld",
      "frame": "frame/0006-frame.jsonld",
      "expect": "frame/0006-out.jsonld"
    }, {
      "@id": "#t0007",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "input has multiple types",
      "purpose": "If property is a keyword, processors add property and objects to output.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0007-in.jsonld",
      "frame": "frame/0007-frame.jsonld",
      "expect": "frame/0007-out.jsonld"
    }, {
      "@id": "#t0008",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "array framing cases",
      "purpose": "Various cases showing array output for @container: @set, and non-embedding of node values if @embed: false.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0008-in.jsonld",
      "frame": "frame/0008-frame.jsonld",
      "expect": "frame/0008-out.jsonld"
    }, {
      "@id": "#t0009",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "default value",
      "purpose": "Processors MUST skip property and property frame if property frame contains @omitDefault with a value of true. Processors MUST add property to output with a new dictionary having a property @preserve and a value that is a copy of the value of @default in frame if it exists, or the string @null otherwise.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0009-in.jsonld",
      "frame": "frame/0009-frame.jsonld",
      "expect": "frame/0009-out.jsonld"
    }, {
      "@id": "#t0010",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "property CURIE conflict",
      "purpose": "(Not really framing) A term looking like a CURIE becomes a CURIE when framing/compacting if defined as such in frame/context in json-ld-1.0.",
      "input": "frame/0010-in.jsonld",
      "frame": "frame/0010-frame.jsonld",
      "expect": "frame/0010-out.jsonld",
      "option": {"specVersion": "json-ld-1.0"}
    }, {
      "@id": "#t0011",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "@embed true/false",
      "purpose": "@embed within a frame controls the object embed flag when processing that frame (true and false values) in json-ld-1.0 mode.",
      "input": "frame/0011-in.jsonld",
      "frame": "frame/0011-frame.jsonld",
      "expect": "frame/0011-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#t0012",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Array frame",
      "purpose": "Multiple values for @type in frame match different nodes having one or the other type. With @embed false, nodes are serialized as multiple array values of @graph.",
      "input": "frame/0012-in.jsonld",
      "frame": "frame/0012-frame.jsonld",
      "expect": "frame/0012-out.jsonld"
    }, {
      "@id": "#t0013",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Replace existing embed",
      "purpose": "An empty frame matches all objects, even if embedded, causing them to be serialized under @graph.",
      "input": "frame/0013-in.jsonld",
      "frame": "frame/0013-frame.jsonld",
      "expect": "frame/0013-out.jsonld"
    }, {
      "@id": "#t0014",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Replace existing embed on 2nd pass",
      "purpose": "An embedded node which matches the top-level frame (on @type) is framed under @graph and continues to be embedded. Other nodes continue to be embedded.",
      "input": "frame/0014-in.jsonld",
      "frame": "frame/0014-frame.jsonld",
      "expect": "frame/0014-out.jsonld"
    }, {
      "@id": "#t0015",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Replace deeply-nested embed",
      "purpose": "Torture test.",
      "input": "frame/0015-in.jsonld",
      "frame": "frame/0015-frame.jsonld",
      "expect": "frame/0015-out.jsonld"
    }, {
      "@id": "#t0016",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Use @type in ducktype filter",
      "purpose": "Match if node has a @type property and frame has a @type property containing only an empty dictionary.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0016-in.jsonld",
      "frame": "frame/0016-frame.jsonld",
      "expect": "frame/0016-out.jsonld"
    }, {
      "@id": "#t0017",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Non-flat input",
      "purpose": "Framing flattens expanded input, allowing for deeply embedded input to be re-framed.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0017-in.jsonld",
      "frame": "frame/0017-frame.jsonld",
      "expect": "frame/0017-out.jsonld"
    }, {
      "@id": "#t0018",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "no frame @context but @graph output",
      "purpose": "Set framing context to the value of @context from frame, if it exists, or to a new empty context, otherwise.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0018-in.jsonld",
      "frame": "frame/0018-frame.jsonld",
      "expect": "frame/0018-out.jsonld"
    }, {
      "@id": "#t0019",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Resources can be re-embedded again in each top-level frame match",
      "purpose": "@type matching matches nodes at top-level, and embedding causes them be embedded where referenced.",
      "input": "frame/0019-in.jsonld",
      "frame": "frame/0019-frame.jsonld",
      "expect": "frame/0019-out.jsonld"
    }, {
      "@id": "#t0020",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Blank nodes in an array",
      "purpose": "Empty frame matches all nodes at top-level, and repeats where embedded in json-ld-1.0 mode.",
      "input": "frame/0020-in.jsonld",
      "frame": "frame/0020-frame.jsonld",
      "expect": "frame/0020-out.jsonld",
      "option": {"specVersion": "json-ld-1.1", "processingMode": "json-ld-1.0"}
    }, {
      "@id": "#t0021",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Blank nodes in @type",
      "purpose": "Empty frame matches all nodes at top-level, and repeats where embedded (with list content) in json-ld-1.0 mode.",
      "input": "frame/0021-in.jsonld",
      "frame": "frame/0021-frame.jsonld",
      "expect": "frame/0021-out.jsonld",
      "option": {"specVersion": "json-ld-1.1", "processingMode": "json-ld-1.0"}
    }, {
      "@id": "#t0022",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Match on @id",
      "purpose": "Match if node and frame both have the same @id property.",
      "option": {"processingMode": "json-ld-1.0"},
      "input": "frame/0022-in.jsonld",
      "frame": "frame/0022-frame.jsonld",
      "expect": "frame/0022-out.jsonld"
    }, {
      "@id": "#t0023",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "No match on []",
      "purpose": "No match if node has a property where frame has an empty array for that same property.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0023-in.jsonld",
      "frame": "frame/0023-frame.jsonld",
      "expect": "frame/0023-out.jsonld"
    }, {
      "@id": "#t0024",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "match on any common properties if @requireAll: false",
      "purpose": "Match if @requireAll is false and both node and frame contain common non-keyword properties of any value.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0024-in.jsonld",
      "frame": "frame/0024-frame.jsonld",
      "expect": "frame/0024-out.jsonld"
    }, {
      "@id": "#t0025",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "@requireAll with missing values and @default",
      "purpose": "Match if @requireAll is true and frame contains a non-keyword key not present in node, where the value is a JSON object containing only the key @default with any value.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0025-in.jsonld",
      "frame": "frame/0025-frame.jsonld",
      "expect": "frame/0025-out.jsonld"
    }, {
      "@id": "#t0026",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "explicitly excludes unframed properties (@explicit: true)",
      "purpose": "If property is not in frame, and explicit is true, processors must not add any values for property to output.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0026-in.jsonld",
      "frame": "frame/0026-frame.jsonld",
      "expect": "frame/0026-out.jsonld"
    }, {
      "@id": "#t0027",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "non-existent framed properties create null property",
      "purpose": "Recursively, replace all key-value pairs in compacted results where the key is @preserve with the value from the key-pair. If the value from the key-pair is @null, replace the value with null.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0027-in.jsonld",
      "frame": "frame/0027-frame.jsonld",
      "expect": "frame/0027-out.jsonld"
    }, {
      "@id": "#t0028",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "embed matched frames with @reverse",
      "purpose": "If frame has the property @reverse, then for each reverse property and sub frame that are the values of @reverse in frame.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0028-in.jsonld",
      "frame": "frame/0028-frame.jsonld",
      "expect": "frame/0028-out.jsonld"
    }, {
      "@id": "#t0029",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "embed matched frames with reversed property",
      "purpose": "If frame has the property @reverse, then for each reverse property and sub frame that are the values of @reverse in frame.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0029-in.jsonld",
      "frame": "frame/0029-frame.jsonld",
      "expect": "frame/0029-out.jsonld"
    }, {
      "@id": "#t0030",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "@embed @always/@never",
      "purpose": "@embed within a frame controls the object embed flag when processing that frame (@always and @never values).",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0030-in.jsonld",
      "frame": "frame/0030-frame.jsonld",
      "expect": "frame/0030-out.jsonld"
    }, {
      "@id": "#t0031",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "match none @type match",
      "purpose": "Do not match objects with @type, if frame uses @type: [].",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0031-in.jsonld",
      "frame": "frame/0031-frame.jsonld",
      "expect": "frame/0031-out.jsonld"
    }, {
      "@id": "#t0032",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "single @id match",
      "purpose": "Match on a specific node with frame uses @id.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0032-in.jsonld",
      "frame": "frame/0032-frame.jsonld",
      "expect": "frame/0032-out.jsonld"
    }, {
      "@id": "#t0033",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "multiple @id match",
      "purpose": "Match on a specific node with frame uses @id with an array of IRIs.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0033-in.jsonld",
      "frame": "frame/0033-frame.jsonld",
      "expect": "frame/0033-out.jsonld"
    }, {
      "@id": "#t0034",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "wildcard and match none",
      "purpose": "Match/reject properties using both wildcard and match none.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0034-in.jsonld",
      "frame": "frame/0034-frame.jsonld",
      "expect": "frame/0034-out.jsonld"
    }, {
      "@id": "#t0035",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "matches a deep node pattern",
      "purpose": "Node patterns that don't match all levels, don't match top level.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0035-in.jsonld",
      "frame": "frame/0035-frame.jsonld",
      "expect": "frame/0035-out.jsonld"
    }, {
      "@id": "#t0036",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "matches exact value pattern",
      "purpose": "Value objects matching value patterns are output, others are filtered.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0036-in.jsonld",
      "frame": "frame/0036-frame.jsonld",
      "expect": "frame/0036-out.jsonld"
    }, {
      "@id": "#t0037",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "matches wildcard @value in value pattern",
      "purpose": "Value objects matching value patterns are output, others are filtered.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0037-in.jsonld",
      "frame": "frame/0037-frame.jsonld",
      "expect": "frame/0037-out.jsonld"
    }, {
      "@id": "#t0038",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "matches wildcard @type in value pattern",
      "purpose": "Value objects matching value patterns are output, others are filtered.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0038-in.jsonld",
      "frame": "frame/0038-frame.jsonld",
      "expect": "frame/0038-out.jsonld"
    }, {
      "@id": "#t0039",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "matches wildcard @language in value pattern",
      "purpose": "Value objects matching value patterns are output, others are filtered.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0039-in.jsonld",
      "frame": "frame/0039-frame.jsonld",
      "expect": "frame/0039-out.jsonld"
    }, {
      "@id": "#t0040",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "matches match none @type in value pattern",
      "purpose": "Value objects matching value patterns are output, others are filtered.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0040-in.jsonld",
      "frame": "frame/0040-frame.jsonld",
      "expect": "frame/0040-out.jsonld"
    }, {
      "@id": "#t0041",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "matches match none @language in value pattern",
      "purpose": "Value objects matching value patterns are output, others are filtered.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0041-in.jsonld",
      "frame": "frame/0041-frame.jsonld",
      "expect": "frame/0041-out.jsonld"
    }, {
      "@id": "#t0042",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "matches some @value in value pattern",
      "purpose": "Value objects matching value patterns are output, others are filtered.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0042-in.jsonld",
      "frame": "frame/0042-frame.jsonld",
      "expect": "frame/0042-out.jsonld"
    }, {
      "@id": "#t0043",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "matches some @type in value pattern",
      "purpose": "Value objects matching value patterns are output, others are filtered.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0043-in.jsonld",
      "frame": "frame/0043-frame.jsonld",
      "expect": "frame/0043-out.jsonld"
    }, {
      "@id": "#t0044",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "matches some @language in value pattern",
      "purpose": "Value objects matching value patterns are output, others are filtered.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0044-in.jsonld",
      "frame": "frame/0044-frame.jsonld",
      "expect": "frame/0044-out.jsonld"
    }, {
      "@id": "#t0045",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "excludes non-matched values in value pattern",
      "purpose": "Value objects matching value patterns are output, others are filtered.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0045-in.jsonld",
      "frame": "frame/0045-frame.jsonld",
      "expect": "frame/0045-out.jsonld"
    }, {
      "@id": "#t0046",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Merge graphs if no outer @graph is used",
      "purpose": "Unless @graph exists at the top level, framing uses merged node objects in json-ld-1.0 mode.",
      "input": "frame/0046-in.jsonld",
      "frame": "frame/0046-frame.jsonld",
      "expect": "frame/0046-out.jsonld",
      "option": {"specVersion": "json-ld-1.1", "processingMode": "json-ld-1.0"}
    }, {
      "@id": "#t0047",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Frame default graph if outer @graph is used",
      "purpose": "If @graph exists at the top level, framing uses the default graph.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0047-in.jsonld",
      "frame": "frame/0047-frame.jsonld",
      "expect": "frame/0047-out.jsonld"
    }, {
      "@id": "#t0048",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Merge one graph and preserve another",
      "purpose": "@graph used within a property value frames embedded values from a named graph.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0048-in.jsonld",
      "frame": "frame/0048-frame.jsonld",
      "expect": "frame/0048-out.jsonld"
    }, {
      "@id": "#t0049",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Merge one graph and deep preserve another",
      "purpose": "@graph used within a property value frames embedded values from a named graph in json-ld-1.0 mode.",
      "input": "frame/0049-in.jsonld",
      "frame": "frame/0049-frame.jsonld",
      "expect": "frame/0049-out.jsonld",
      "option": {"specVersion": "json-ld-1.1", "processingMode": "json-ld-1.0"}
    }, {
      "@id": "#t0050",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Library example with named graphs",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0050-in.jsonld",
      "frame": "frame/0050-frame.jsonld",
      "expect": "frame/0050-out.jsonld"
    }, {
      "@id": "#t0051",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Compacting values of @preserve",
      "purpose": "When compacting the value of a property using @preserve, use the term definition for term to properly compact the value of @preserve.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0051-in.jsonld",
      "frame": "frame/0051-frame.jsonld",
      "expect": "frame/0051-out.jsonld"
    }, {
      "@id": "#t0052",
      "@type": ["jld:NegativeEvaluationTest", "jld:FrameTest"],
      "name": "@id must not include a blank node identifier",
      "purpose": "Node matching does not consider blank nodes.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0052-in.jsonld",
      "frame": "frame/0052-frame.jsonld",
      "expectErrorCode": "invalid frame"
    }, {
      "@id": "#t0053",
      "@type": ["jld:NegativeEvaluationTest", "jld:FrameTest"],
      "name": "@type must not include a blank node identifier",
      "purpose": "Node matching does not consider blank nodes.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0053-in.jsonld",
      "frame": "frame/0053-frame.jsonld",
      "expectErrorCode": "invalid frame"
    }, {
      "@id": "#t0054",
      "@type": ["jld:NegativeEvaluationTest", "jld:FrameTest"],
      "name": "Out of range @embed value",
      "purpose": "Any other value for @embed is invalid and indicates that an invalid @embed value error has been detected and processing is aborted.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0054-in.jsonld",
      "frame": "frame/0054-frame.jsonld",
      "expectErrorCode": "invalid @embed value"
    }, {
      "@id": "#t0055",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Framing list with mixed values",
      "purpose": "Framing list values which are mixed.",
      "input": "frame/0055-in.jsonld",
      "frame": "frame/0055-frame.jsonld",
      "expect": "frame/0055-out.jsonld"
    }, {
      "@id": "#t0056",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Frame matching on matching value in list",
      "purpose": "Lists match on any matching value.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0056-in.jsonld",
      "frame": "frame/0056-frame.jsonld",
      "expect": "frame/0056-out.jsonld"
    }, {
      "@id": "#t0057",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Frame matching on any matching value in list",
      "purpose": "Lists match on any matching value.",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "frame/0057-in.jsonld",
      "frame": "frame/0057-frame.jsonld",
      "expect": "frame/0057-out.jsonld"
    }, {
      "@id": "#t0058",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Frame matching with no matching value in list",
      "purpose": "Lists match on any matching value.",
      "option": {"specVersion": "json-ld-1.1", "omitGraph": false},
      "input": "frame/0058-in.jsonld",
      "frame": "frame/0058-frame.jsonld",
      "expect": "frame/0058-out.jsonld"
    }, {
      "@id": "#t0059",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "@embed: @last replaces previous embed values with node reference",
      "purpose": "Verify that within a matched node, by default only the last reference will be embedded in json-ld-1.0 mode.",
      "input": "frame/0059-in.jsonld",
      "frame": "frame/0059-frame.jsonld",
      "expect": "frame/0059-out.jsonld",
      "option": {"specVersion": "json-ld-1.1", "processingMode": "json-ld-1.0"}
    }, {
      "@id": "#t0060",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "@embed: @once only embeds first value with node reference",
      "purpose": "Verify that within a matched node and @embed: @first, by only the first reference will be embedded.",
      "input": "frame/0060-in.jsonld",
      "frame": "frame/0060-frame.jsonld",
      "expect": "frame/0060-out.jsonld",
      "option": {"specVersion": "json-ld-1.1", "ordered": true}
    }, {
      "@id": "#t0061",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Matching embedded nodes with @default",
      "purpose": "Verify that embedded nodes match with @default and a wildcard @id.",
      "input": "frame/0061-in.jsonld",
      "frame": "frame/0061-frame.jsonld",
      "expect": "frame/0061-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#t0062",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "An array with a single value remains an array if container is @set.",
      "purpose": "Cleaning up @preserve/@null does not violate container: @set.",
      "input": "frame/0062-in.jsonld",
      "frame": "frame/0062-frame.jsonld",
      "expect": "frame/0062-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#t0063",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Using @null in @default.",
      "purpose": "@null may be used as an @default value and is preserved in output.",
      "input": "frame/0063-in.jsonld",
      "frame": "frame/0063-frame.jsonld",
      "expect": "frame/0063-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#t0064",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Using @default in @type.",
      "purpose": "@type may have a default value.",
      "input": "frame/0064-in.jsonld",
      "frame": "frame/0064-frame.jsonld",
      "expect": "frame/0064-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#t0065",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Match on value",
      "purpose": "Value matching.",
      "input": "frame/0065-in.jsonld",
      "frame": "frame/0065-frame.jsonld",
      "expect": "frame/0065-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#t0066",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Match on value reference",
      "purpose": "Value reference matching.",
      "input": "frame/0066-in.jsonld",
      "frame": "frame/0066-frame.jsonld",
      "expect": "frame/0066-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#t0067",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Match on list value",
      "purpose": "List value matching.",
      "input": "frame/0067-in.jsonld",
      "frame": "frame/0067-frame.jsonld",
      "expect": "frame/0067-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#t0068",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Merge @type from different graphs",
      "purpose": "When merging nodes, ensure that @type values from each node are retained.",
      "input": "frame/0068-in.jsonld",
      "frame": "frame/0068-frame.jsonld",
      "expect": "frame/0068-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#teo01",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "@embed true/false",
      "purpose": "@embed within a frame controls the object embed flag when processing that frame (true and false values).",
      "input": "frame/eo01-in.jsonld",
      "frame": "frame/eo01-frame.jsonld",
      "expect": "frame/eo01-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tg001",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Library framing example with @graph and omitGraph is true.",
      "purpose": "Basic example used in playground and spec examples.",
      "input": "frame/g001-in.jsonld",
      "frame": "frame/g001-frame.jsonld",
      "expect": "frame/g001-out.jsonld",
      "option": {"specVersion": "json-ld-1.1", "omitGraph": true}
    }, {
      "@id": "#tg002",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Simple embed",
      "purpose": "Test embedded graphs",
      "input": "frame/g002-in.jsonld",
      "frame": "frame/g002-frame.jsonld",
      "expect": "frame/g002-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tg003",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Embed with direct circular reference",
      "purpose": "Test embedded graphs",
      "input": "frame/g003-in.jsonld",
      "frame": "frame/g003-frame.jsonld",
      "expect": "frame/g003-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tg004",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Embed with indirect circular reference",
      "purpose": "Test embedded graphs",
      "input": "frame/g004-in.jsonld",
      "frame": "frame/g004-frame.jsonld",
      "expect": "frame/g004-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tg005",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Embed with indirect circular reference via set",
      "purpose": "Test embedded graphs",
      "input": "frame/g005-in.jsonld",
      "frame": "frame/g005-frame.jsonld",
      "expect": "frame/g005-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tg006",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Embed with nested indirect circular reference via set",
      "purpose": "Test embedded graphs",
      "input": "frame/g006-in.jsonld",
      "frame": "frame/g006-frame.jsonld",
      "expect": "frame/g006-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tg007",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Multi-level simple embeds",
      "purpose": "Test embedded graphs",
      "input": "frame/g007-in.jsonld",
      "frame": "frame/g007-frame.jsonld",
      "expect": "frame/g007-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tg008",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "A tangle of nastiness",
      "purpose": "Test embedded graphs",
      "input": "frame/g008-in.jsonld",
      "frame": "frame/g008-frame.jsonld",
      "expect": "frame/g008-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    },{
      "@id": "#tg009",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Recursive property embed w/o circular reference",
      "purpose": "Test embedded graphs",
      "input": "frame/g009-in.jsonld",
      "frame": "frame/g009-frame.jsonld",
      "expect": "frame/g009-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    },{
      "@id": "#tg010",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Framing blank node unnamed graphs",
      "purpose": "Test embedded graphs",
      "input": "frame/g010-in.jsonld",
      "frame": "frame/g010-frame.jsonld",
      "expect": "frame/g010-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tin01",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Basic Included array",
      "purpose": "Tests included blocks.",
      "input": "frame/in01-in.jsonld",
      "frame": "frame/in01-frame.jsonld",
      "expect": "frame/in01-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tin02",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Basic Included object",
      "purpose": "Tests included blocks.",
      "input": "frame/in02-in.jsonld",
      "frame": "frame/in02-frame.jsonld",
      "expect": "frame/in02-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tin03",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "json.api example",
      "purpose": "Tests included blocks.",
      "input": "frame/in03-in.jsonld",
      "frame": "frame/in03-frame.jsonld",
      "expect": "frame/in03-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tp020",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Blank nodes in an array (prune bnodes)",
      "purpose": "Empty frame matches all nodes at top-level, and repeats where embedded.",
      "input": "frame/0020-in.jsonld",
      "frame": "frame/0020-frame.jsonld",
      "expect": "frame/p020-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tp021",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Blank nodes in @type (prune bnodes)",
      "purpose": "Empty frame matches all nodes at top-level, and repeats where embedded (with list content).",
      "input": "frame/0021-in.jsonld",
      "frame": "frame/0021-frame.jsonld",
      "expect": "frame/p021-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tp046",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Merge graphs if no outer @graph is used (prune bnodes)",
      "purpose": "Unless @graph exists at the top level, framing uses merged node objects.",
      "input": "frame/0046-in.jsonld",
      "frame": "frame/0046-frame.jsonld",
      "expect": "frame/p046-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tp049",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Merge one graph and deep preserve another (prune bnodes)",
      "purpose": "@graph used within a property value frames embedded values from a named graph.",
      "input": "frame/0049-in.jsonld",
      "frame": "frame/0049-frame.jsonld",
      "expect": "frame/p049-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tp050",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Prune blank nodes with alias of @id",
      "purpose": "If @id is aliased in a frame, an unreferenced blank node is still pruned.",
      "input": "frame/p050-in.jsonld",
      "frame": "frame/p050-frame.jsonld",
      "expect": "frame/p050-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tra01",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "@requireAll only matches if @type and other properties are present",
      "purpose": "If @requireAll is true, then all listed properties, including @type, must be present to match.",
      "input": "frame/ra01-in.jsonld",
      "frame": "frame/ra01-frame.jsonld",
      "expect": "frame/ra01-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tra02",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "@requireAll only matches if @id and @type match",
      "purpose": "If @requireAll is true, then all listed properties, including @id and @type, must be present to match.",
      "input": "frame/ra02-in.jsonld",
      "frame": "frame/ra02-frame.jsonld",
      "expect": "frame/ra02-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tra03",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "@requireAll with type and properties",
      "purpose": "If @requireAll is true, then all listed properties, including @type, must be present to match.",
      "input": "frame/ra03-in.jsonld",
      "frame": "frame/ra03-frame.jsonld",
      "expect": "frame/ra03-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }
  ]
}
