// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xce3PbOJL/KijeVc1MlR6ezOT21vfPeqTsju6S2Gsr3rrdpFQw2ZIwpggOAErWpPzd",
	"txoPEhRBikrsmUzt/hVHxKPRaHT/utGNj1HMNznPIFMyOv8YyXgNG6r/vIhjkHLO7yG7BpnzTAL+nICM",
	"BcsV41l0Hr3hCaRkyQUxzYluT1yHUTSIcsFzEIqBHpXqZguFzZrDzddATAuiWxAmZQEJudsThZ8KteaC",
	"/UKxOZEgtiBwCrXPITqPpBIsW0WPgyheZDyLA/Te6CYk5pmiLMM/KdFNieLkDkghIcE/YwFUAaEkF5wv",
	"CV+SnEsJUuLEfEnuYU82VIFgNCW7NWREwM8FSGWGjAUkkClG0y7yFvCQMwFywQKsmGUKViBIAhnXoyID",
	"UrYExTZAGC4/5lkikRr8ZMf05mNmBJywa6J597j+doQHF7AUINdde2qbmFEGZLdm8ZrENPNZzu9wS0gG",
	"u9qcMshBGfM8sL2XV/PZ5duL1wPCloTpLYhpiqPjUnQnt1GVVMUpg0z9D+FqDWLHJAzI9au/vptdv5oG",
	"59ZkLczPocXiF8c9X4oDg2nu/VwwAUl0/o/64ahN9GEQKaZS7Bs6l+XA/O4niFU0iB6Giq4kDspZEn+/",
	"jaMPj4NoUsrljaKqkM0FVC2I1E2aR1iWXZussUzpXqYdwDb3ltYgr2tdmqkiuKzLXAVkQ/8htbLCvloP",
	"1M5pfZn91nJsCUhKz1VMWTLh2ZKtmrRPZ1NivhHRqlr/hFoNHgJLtx+C0pyy7B6SRcKSgDRcCZCQKaNv",
	"WUZ+2smvTddvCBfkJ8mzNPnaLOsb5OyGKtw1pmCjh+MZXC6j8380ZeXjAVMeP5TyE1Eh6F6z2rG15E0v",
	"kU9gS3Ommfoj0FStJ2uI79utmPtCNqU5W+t+JMaOrSchLoSATM3ZJjDoxHwkWq9adVCZLMOr6DxKqIIh",
	"tgmquZZTamSLMEneR7LQCuF9hDrPTIAfipzQLCGiyNDMHdc9dipPlEOsC3FdKp6nbLXWgseS6Dz6w0+F",
	"fEg3sfju29VLXEe1NYavmq16f2YZU4wquJxNJ9/fTq6Ncu4CGq4HwS7E01czKQuKptwOEgAfPn5YJKAo",
	"S0M6sJCKb9gvIMluTRW5Z1mCO2jN0kwfWbKjmUIbRVZsq+HD7eQmbO1TyjYLyJKcsyywtAl+J+67ExU7",
	"y1LwDQIMAZ6yInpIklBFyZpKi10qw0aXCgSxgrEs0nRPaIxbrdHJUeNqDOKCWUYvmGXsohBpk/x3168d",
	"za4hsV1Ra/jrouRvNE1Bjcic3oMkuYAY1xQD4Si2duIdpOl9xnclqCI5FXQDCsSIzJbkjuPJ7CBSS35j",
	"MCqAZFwhpNuyBEGHwW327LuRqlXgynYsTR1cJLEWjJaWLLMKkPAcMpYMXbOha3Y+Hnfxu6S0D2zdaUaO",
	"1zxNQBCa5ymLDcP1sTBDkmrxsdaehTBt3l2/DlNSithCwSZPNWOTAMyxH0vwWYmmkUWL23drlkJdEGOe",
	"xWmRGETLJEEgKWiMA49K3KXxGw6cC77EIZgsV2DQYoHaukgVy9P69JaysGSvBM1UC3SzBw5RqZUQt9+6",
	"l4Z1kqi14MVqbWj3xHKO/68aesdS41vDCHiI1zRb6VOY1R0d1Gx19ybmicbjuBpBpIJcaulvinACS1qk",
	"CuerazgcIsgHni9Q37c7SFuaFmC9oBIoH+halDtUjDn9uQCHsc0BJwr1JlohC+7vUIVqC1jcDSWe6kxp",
	"Yg1E1wt2h33H1LplPlwhsWiGSFBo5ZJCU5wL2DJeSI9TFbgnqGjYFiShdmnI7/oeDghT5M27mzlhWkIB",
	"/88yR7Uj+qJOtLU1bvkBFkn9wXG8ms8QMjJTvr2cl7LCMj1JJQkTlIRlynfG08wFDN0+Q7IwcqKVKWK1",
	"4H47Jdci+hOjV2SlDLUM203Uy4CHHGIl0ci542dkOgeBag+3QGueuhDbPR2RqZFRfSgOfcmjbl1Jn/4u",
	"+xHmO+TNg4X7X1nROn1Gf498HNvi6QSQagug6ekDNHofD7z0wUNtLkNPE6+pmcxaDJ+n5qyiqE5rTiVK",
	"VQpb1IwsMxYSd+FAX/DA4CjyI3JT5DkXShqz/+N8fkX+8mquVY/+zzUkTECsRnZaSTZ0704D+eu12W/P",
	"dDo9o+ETcrCQ2EtxIlH5a8Sl1sAE2fA7lCRLI83zcDzgIWwja2xx2qAy1MYTjbkQkFoHa0kygKRPpCC8",
	"cY6WDx3i2MN9apXHqylVFFdal6Lc8xKnsNS08WyWBA9OXoicyxbPOky1mfaQ4iZ1/mnpAP6ejxHYy9n0",
	"uNMfHM52buX9VSvvcSXI8ursOj63nXmr+7rCF9W3ziBPX6ceJzjRmecm4ILT/6eAZXQe/ce4ijaPbah5",
	"fLB0G6Zp8Nxbj8/iAN/6inZ43s+OG8VrVBfZKmTH1jSl2Uqba5okBhpZmMuXbYgcIVg40ph4ENwMgbCH",
	"b5hC1Cb3UsHGxB+0G2PV0RHkX0UGu3YtFOd6HEQJ39BQkHmqfz9h3VsQbGk15RtQa97CgnfXM8eBZhej",
	"fQ3UC3FoyYRUBJIXL19++0eSF3cpi3Vony/JdDYlX1utzQW5so7IdDb95hg3H1vl0wlZTxG9EpBTATpA",
	"gKKNsPDvPUIkth8xkQXsqRHl30mlq+oy6/sDLeAxAXFMJnxyr8tOPjs6FxRQiy3t29S8sFBgUQjWbWB6",
	"8apdXYdX2mp2YCE8mhujtZDtN9BTLDY8aTOcDQoLuYbkom6ojoNJ0+3A/2jHj133Shfkf28u35Ks2Nwh",
	"FkTILsBCBVm/zbIH2AEzPNPeRRRFry3nkim2BWIvntDjrveo7rAkoUoPmDAZC1D2zq7tBpHcFcocabXP",
	"WUzTdG/CaQjLtpDuiVxzocjXMFqNBuQO1A4gIy81BP2vszNH6Ddt12OaRre5ocuxahEaDurN1gESHiC6",
	"jIlxqSCxkQfNMuSTZNkqhSG6QQKWIMDebRr+SvSVkIs1DNx0csNO3FFU6i+1dunoWewuwex7jfUuR8t3",
	"aIJaFWNn85IVUokiVsYhwA64AbeT9th/OVwQMX6+Re1AQLNpFBjfY3I3g3pan1u0p/tqEHcTUKQBHpvG",
	"fiSujCV4rteSsrQQYK9VbAA+BKEgvg/BJ+yl1xjEDCAEF81ur/BnsgEp6Qo+GWzcem3IRjc6fiDMQhxl",
	"wYm8XetieNeemVFbdu2YK+HtmE/d79ihOOTAaR5FkH+fzP1eXsX28Ow8t1PxRCj9sZ1rfYBuJ+P6gJVS",
	"w/Clxzx5TI7xVJnol4vunSJN/qHsigO2LuhElvhX8H00sB+M+f3o4E692TidbTz5DNYeU5M1tnYL2Elq",
	"yqehVFSDWkjtidIyTla4B3tSI6lzSz5FZYb40Edp+lSdrDb1py9Ab4YW/xn8O1V3niDbn6Q8247rcfUZ",
	"XFVPzuBoLFtyTTaqv1grTdhQlkbn0RrSlP9JiUKqu5THowS20SDK6AZHnuPPP6Q8JgroBtmg70WitVK5",
	"PB+P691QMupeXdn9dnJDpLnA8JFWecWBLqTPcVKgA0f+9t2E3E6GF1czQlOercyd6GUO2Wz6/e0EJUvx",
	"mPvB4LEeBoR/oW662ZyLaBClLAYrF3ahFzmN1zB8MTprrHG3242o/jziYjW2feX49Wzy6u3NK+wzUg9m",
	"F/1NY/QurV2E3oDYshjI17eTm28MCJaGT2cjnFgjO8hozqLz6LvRmaYlp2qtxWvsZwydf4xWoEIJXKoQ",
	"mXQOfUvyFgoydVcT0V9A/egNXV2S6mlfnJ05wQGTtONd3YxRw1bp0sdOQSiRSovngXb7P30CZLHZULEv",
	"E7DIxNIXTqF6HERjKwHezstxbkJUQ33JOUQ/X18a/zIUlZuc85C7fEWFMmqBbXUSdM5GZFbd5duRCcfx",
	"SCGYvUy1F+0mltVgdyiU90vlkVqqfuDJ/sn43hltfHx8fHzGPe+OXPbZ/asgm+3Nj00AEZ5Y2O2qi4TN",
	"n5Hjj/av2fRx7GFl007LgstLkBofBHNjXBB8phOj0RLqc1rpzXKSyMcOShQw8Ph2aA4/DFokcXZ4zRU4",
	"xldcqoMou3wmeQpdNj2BGB0Arx6ioQnx2OJJQRm/OUUIqjTTL1EKTDBL+vazTaejMHhyUGaRP4c0dMfY",
	"fhO56OTUE0jI+KP5dzZ97DLFgsEW5GFiYIcdDm3ZbyiJg3C6tR4lMImsvp4k7b+ycPTYmJNFpIY4ynxX",
	"zpL4i1UmXpoSK9OUmJ9DNQsidR9Ws0wne9srqHqIRbYlEodqnsqmSI7O8NPZR6yZLNRh+ITlobxyrJp5",
	"21ImoeCmPJNdDKe8PTPCasts6mVAj+XMtR0GFO1xea3bqgQvEe6RF6Ozxk2qZo2rgLObYaoIdO5wmRN8",
	"mE3q0uiD+hP39qIk6ojuvNX5rzrr9A50Eq3i5H0U8wTeR+Uh/LkAsa9OYT2B9LOU6bzKyjUVeuivt83r",
	"svyTz5vzgpSRIJKAYFtIyjw/kx/oAgdl5rLOHrQ3o8Hr0IFNfLQ9E0JXePyVSdhuXRBPYFGFpT5zVeYe",
	"ytC8o5WLZtZoMx/dZP1IWpgxo5P3NHi17txBY3QKCWJIV7oqinvp2V/JsmGtZMTldKd7AlLRu5Tp7IQy",
	"QTw4pc0HryV/r5hUtvQhF1wfMS5MNvWG3rvmrbfe4RPhJW2czCxTilovsT0yocmNPk1AMpedb5Le/Rxd",
	"yxvFyYYyU95iEtRdfoOfkaHraWia3tH43pi9IOtt4rw0mfVmTlscbXfXctoTBByyLg1mgipP/ubHy3ev",
	"p6XZtNH4LaoOnYrHpRxKpipql1ysQOxbGakznT5Pvl3xGFr9LeyNeLvf6B0v1AHKMi1M1U5VOmZqnkfk",
	"jatkaZnEQw1G+HWJsU5TX9Rrb8odq+0Py0hMTbA3UDQj2zgVrpc7iXMm+PiVtMFLMuFZBrFy+dDvrl+b",
	"7XZFdSxNdQ6/S9/hWxD78tBq1aZAbFgGHkO/Qhbl9I6lTDGQWlydEpEjcv1qcvnmzau301dT5MR0n9EN",
	"i33ret199MwsC4sEPvEIosyTNao1TxLeXPy/Xi6evir9xh01W42g2Ib9AuXB+UrqogfBIIvhCVaHYy6Q",
	"sOhEp8irFLKWfG+fPwChFYrdNle6Bg/KZWYdIGwQI3LRWpmD5rhKzcqptFUyNAtWHJZqwBn4CudXnLd5",
	"U40CQ79oSRcvYJeqeseQWNNZzZXMqzk3hVRE0XvtP3DU9LzIbHlUOSiTuqhrVVDEgGCfQxBsxTL8bNfB",
	"pB10QGJepAlqBJoRqhQq5Za9LRM7T/FFvzt70YHSH4a73W645GIzLEQKGcKHpA7bD+6MbNbiQZzAPbEQ",
	"MCcat6wgQ5h75PWPtt4a35oMNJO+l+5tWSzT8M4WKKL5Y4qtnA8mmLxHLZkCvW95eSJcN+eW4woX35uG",
	"7yNPtBChuboUiyytFW4pmsK1wQONlZU7W8XmY1djMY9fqOMefBgcDxv8mRdZcuAtaScp6Mh4blKVn1f6",
	"STkV7bcME7NyCVkiifGXwnmOBjmk+0Z5o0MdqO1XoORh/mhVzIanzbehVDaTI10mpKeGRVXbV5+43RlD",
	"pxy9sSsqejvbJx+onmXs/wKgpbV0vaVaIOh3Ngep+2jnX4Y3eYRM57edP4GX+Kn1wv9GAb89CgiUb9Sr",
	"C/6lPPdTK6GPBsf6liz3cPL7Qot/e/ENTlUuy/kX7nA1SK/7kue/e3/5WEVIPW7sx3MPzGwInTbvD759",
	"ugyNjkKUADCe2ELMx0H0/dnLQGqdMbJvuSIXacp3tum334WuSI2Ev8oUU3sy55y8pmIFusOLP4ZKyTl5",
	"Q7O947sMAfSW0q0eOL18uK8jC0PWnysxD39gA22Naf2Fv7Lk0j54opVgwEkzwNyosDWVFlkGHjBqKPiq",
	"IC2Mv+f2Cb1nQuAdMLPxhI3DnMa8+2+euLy+0562DHrTLV5w02E8aZ5FmU4ZwsBinyu+EjRfW0wmaJbw",
	"DTFjNJ6AcS8dQEdNm7UgRoi6TGXXQz4tNrz5NE6LRe8GTI39fV/r0HD4rTVNjqB/at7HYfZZGFnSX75i",
	"eVzZekyxcnK4jf107NPd0Ybeqmy5n0W1etZk9w80IdWFckPpuedmu7Wc5fLQLHr8sShY8ng0mdQJpenV",
	"1DV21kv9+Yf9u8LeUjZ5eTQzo16JaCZEiFeYMQPvGnZe8WI3VLn1AcP5FUVx4uUqzj52ElXPAKnJ9tCv",
	"eXaWpc5BndnaVgr6TKqbJW0P1c6mVpy0VjR1x1nzkaoYWG6wdAmUN6Cojh9VQZTbKzPYKUD/RpWOXlg9",
	"HjwYEyxlzNuW5yiqyOYZoDO14QKIl7rtJ93LlvKFnkrkYH0FagOk8mXo859NYdJhTpv1dsqQSu0JnVru",
	"jkHMtWoGnVPj3my7ndx4h8kvFWiV6I/qQafCpZRtPIVxqAhMZpWfdqMTfz83qbzOH11Ob96s8sq5/ESu",
	"wp3zT0gdPMbmFSgzuQfTrMNulG1ee8ovzOhjaX1T7S0LmkkzTFhl6Xd2Pl1lHU12NKVFxzPYpiZLXo/x",
	"TMlrTXR7WFf4XOmtwTrYZ4YLrTWTfSS4UYHe46w/eVLjry4Sfnqfp39+lUy/q19DJtoe0XoSpfbUtiMo",
	"T/6gvwvl4gOAZ9UujaLRX0W/BIsKT9AweZ09LTLhJGC+z+ExLBg7SNOhfp53nLBkGJePv3e6JVXTpktS",
	"PSH/jFysJumXdu6uccsVnu7QuCzxufFt2w/D/LPTU8uE9ORJT51mio62mPVVtZbn43HKY5quuVTn/332",
	"h7MIz6jl0CF1Jmw8NIGUxLxXfxC/rUi1MebmGp2o9hynlOzmSIGCy6qfX6j4+OHxnwEAAP//9tlkh2xm",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
