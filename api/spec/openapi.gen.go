// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x963LcNtbgq6B6typ2bXfLzmXmi/bPaiR70okT6ZNku6ZiVxdEorthsQkGANXucXlr",
	"X2Nfb59kCwcACZAAL7o4/mb0IxWrSeJycM7BuZ9Pk4RtC5aTXIrJ4aeJSDZki+GfR0lChLhk1yQ/J6Jg",
	"uSDq55SIhNNCUpZPDie/spRkaMU40q8jeB/ZD+aT6aTgrCBcUgKjYnhtKdVr7eEuNwTpNxC8gagQJUnR",
	"1R5J9aiUG8bpP7F6HQnCbwhXU8h9QSaHEyE5zdeTz9OJ9+IyJRLTTLSnO3/xn68X5y9O0G5DchT8CBWY",
	"4y2RhCMqUClIiiRDnPxREiFheThPCGIrhFFCuMQ0R8ecpCSXFGdIrQxhgVKyojlJEc3RBUlg+T/Mn8+f",
	"z9FCol9fX1yi304v0RXRMzC5IXxHBYHHVCCcI8w53qt52NUHkkgxjQz7V/XO7+cvj3/87se/vFfQoZJs",
	"YfP/nZPV5HAyP0jYdsvy+R5vs/92UCPAgTn9gyMXEicGep8rOMNS1N/JMmd5EkCLCzgJlLBcAUT9EyN4",
	"VQHP7lIylHCCJUEYFZypra1QwYQgQqidsBW6Jnu0xZJwBUs4JAN5PWRSATqIBWZ5S/KxoJyIJQ1g3CKX",
	"ZE04SknOYFSFZxldEUm3RMFVkITlqVCrUY/MmM58VI+gJuya6LJ7XBfrw4NzsuJEbLpIx7yiR5mi3YYm",
	"G5Tg3AU5uwIczcnOm1MEISgSVgSO9/TscnH629GrKaIrROEIEoXsDLYCH9mDqok3ySjJ5f+skXuKLP0F",
	"54ZlLfXPoc0CaRnoucwiMBhA74+ScpJODn/3eZA30fvpRFKZqW9D7K8aWNPgZDr5OJN4LdSgjKbJ9wmd",
	"vP88nRwl1y84ZzzON4+Sa8SjTJKoj9sfwZjI+a1/q3okb1vXt9nOuT7NsRupCRT+bHKiMPNJCjPbQpJt",
	"m+00duhO0dynXvPwbXoTB7bqPW/fbNdLmoYhtAijOJzO0nu9+TUZcObTCWA+X2pSXFESQJ5T+AfONJVw",
	"VL8bpnyJZSnCu7mAZ0PoDCBSDfa+eRKfp5P6rjxm+YquSw6Xjrgoi4JxSUIAzc0diOQGSwObKyKQKEhC",
	"VzSpmKp7EatXG78tNCSEnkq4t3kAlTNMtwGAvGQcbQVbblOWIJyn6Cb5HyKdfdhJdJMglmf7OTrVy/Wu",
	"w4wKqdaZ4y05uMFZSVCBKReKbRNOEMHJBh7WJyXUlaeWgfAVK/V2RKnHZqsV4VoS8Hc5R4pZ6gnMVYBz",
	"4MFIlMnGgvJJrpl1iiVGQvIykSUn4ukUMe6JH85HLgrUJ1oT5BLEE2oRe7D4US/+pB4ARt4Xkq05LjY0",
	"WV7RPKX5erklcsNSsRQdGGMXn2BBkCC5oJLeEKTxVmjkMGDeow3bNTGFCnTFyjy1V1xNPBbVXuTp7LUg",
	"HO02zAoxRDTPwpXG2hdeU7rytitKKsk97hKuZHcGpGfQr2FOUDUVyPet9+MHMG6bKRVFhvdBOm8LvQ5x",
	"MI+qNKzNYKimXXtA9W5qBIWN1XJ7hvN1idckJDT3IarZRGh/LAkLMR7nqHiFEZ3tOVmRtKFTNKX/3xcX",
	"p/Pn//Hs+XezH94HGfqK8S0OXeDo54vT3wyStKbVX2kYUuGAboronMyn6MNOLm+S5QehBHaOsrRY3iRz",
	"dEIKAtiBWO4OBHxoCr80j29VcuBKJCNbBWW9PbsQrUjlKXrCzEWW7Z8q5UzSpMww14xRGDStYPXr0T/s",
	"DPA1zfVClH6hmShQO6sQx/8+CEnG09AFW5GfFnYVmwb2DVs2ZKWYPqxxaxk1DKb+tUdiw8osVQzaLKaW",
	"nd/iLCNyHF2BSgVirYieOu5mGVNNaJwUnAgFkXyN6mGH3KlztFghtqVSklQfe0pWuMwMJijG+mE3cmMR",
	"paQbkbVSoic166aiSxjQPI8KD8e6EeMmkWEqD4gEhsxTIug6x9JDczAmHDuk5tP6RspCHB4cqKtacpxc",
	"Ez6nRK7mjK8PUpYcbOQ2O0g5XsmZ+n3GcCk3M72C2U0ye/a8V3Qz3MIRqHsFNUvQ9aU/7xS9tRwKkneb",
	"jx5+aohfVzi5XnN1By8TlmntqHUAGUtwRiKP1qyPnb9S73yeThTZhjGRfJQd05c8C/z+OQRDu88IgKLw",
	"WRgR9ScqJOP7EyxxG+U6X6+pucUsK/l3o1837MEw5C7tLqj4uMQV1n+cASJ8qsGl/EtQjOMbYJ0xxj0s",
	"AxzkRfUCOsGSRDUtBaPIEBbg3QOEro/FILVMcpwLDJa+IMwv6+dhoEe1Z62pmdUFjibIChr4VVkCxhN+",
	"1MBQW5hPFyfHLsc2FqZOvLQLWpIchFdfFekR6qyh5EX9bYcg9dIRlTyyuiJwIcWMU+am7lvWz28vz+A9",
	"g9miSwJRzwesZCjtNJCmAyHG2lzawB6HAV1uhkICoUbspb644Knm2pooyiuhdpPLbN+0nmJPwQb7/RVB",
	"hq9qQ7XHV1HOJOJEljyP4EDMehRQB3DlFgnZN7SoiGieZGVKhJUzcXKds11G0jUwc5d4YnbzCDcWX8a2",
	"f3x32z4sl96ngb8+VDUby8npanL4e5t+PjXNIu87GIcLVW+VK4+jtM58PlSK89YdIduRJuFOJtm2Pbbs",
	"X64epijbsue2ttvhSszWAWC+fYFwtlb/MU7lZjti+LZ9Nk/CM5A8uZ8ZPuyuh4ALI0HzdUZQUV5lNAHa",
	"wQJh9PPbXzTB3XoNDZRRC5oCaPX2O9HFOfP7QJwOm283BmlNfrchYEDosfLWkkDATIzzFP0Ny2QTgh7Y",
	"MlihPrt8dRHCx6VW9vutdEFTsFqLwq7fz18e//WH53957661QjeBnigE1zM9tS//x3vHwmWsBn37epGn",
	"BaO5VNya5AlLSfMzxjugAffgz28v7RJ+fD9SHs+TLwQvRa7/EvAym1vWFNsE198YywjOjaVDe0RAauim",
	"DjOgVglxmlLjLHKJxUX+yiQcYjJooc+mMvFIbo1+HTM7UwEzuyF8H4SjOhu1FbJinLgyD8hhBWc3NCXu",
	"cNdkL9qOEWRk1fZyVzgTZr125KN/oGTDBKnASKWdSbSmYlzJew6vvdKH0naQhThGhDDC5z+QPd+LbeYi",
	"4hJ0QCoqz6DPGmtvYgTLP/VcS2YA83pw1xfeK2O3dVrImM9U2wLVtyD3evKXv81he+nbglrKwF28+Jhs",
	"cL4mXsDOMUvJAHWa6G+BpZZyg4CfrTjbWg8xmA0DflBKcrnEQqjfWCQSRdMSEKQ1v8sdU9xPTJEgBebY",
	"MF6M3k3+97sJSjaY40QSrh2WK8qFBG5JhRM+grCURCGDQuqf315qKtUifMebZ+xMvR3WJBobioScXGjn",
	"smGR2udV6ToKUjoKRhJvDUWRqR8pMM9oDBt68ub44qneOMuzvXM1VUzp3aTk+SElcnUIIWniEM7nUM80",
	"q5Y/U8s//LCTM/ukhsO7iQ4oy1NYqai1RrPebSmkv5lSCZ7oVCEY+nb+DB3Vo83+htX2j/WnR/VXamMa",
	"QF0AD5oM9ViLE8DQN8cXWuVXGhjXVq2wR6ZYqjUNoL3qTYf+eono7sQYM21Ud9r2rmQZjXh8uOg/+dGc",
	"YQ+7g9eGwXuc9XChrjIsicKR748XA3ie/aJlSarstucxo+LAkNLjUki2pf8kAu0UcV3TPAWHjo61M0LP",
	"DoP5naE1vQG7yZvjiwitYLpdpkEz/7kBMuzsjJOZBagiSoU1LzO2m9dUdEH4DU0IwokUSns8PYMvd1rE",
	"cViVCIZ1wEqIEYFDpIvpFtnnVjw3+wX81a57xy6mnaQQcbLBwpiP6rhBvJI6SEVBblVm2R7hRG0ZaKM3",
	"dtGyGXPky8pyb9w0/vJfn79yDS2AC+ZTxc7cfWHrjkWX+JoIVHCSqD0lBDHFzM3EO5Jl1znbVXatOpQY",
	"RM4rpqi7Y5Eg6LYGw5yANdFInyAK55Ul1K7Z2YXa2Y5mWXURJ4CikTdpXpmdCpLTdGZfm9nXDg8OuuBd",
	"rXRIVLDGvYMNy1LCvdsSMNbcSvXmE9f1qNbb51bqjK1z6N990D2iNTiGLHknCpwN669w/PoJywWFnQqk",
	"x1FyvbULTlIFZkm3pGcJ1j8Z3Q280ONvI9siA4wLeZHMw4ALQROpsUXuNjQjPoUmDAzP2gZFhXd1V/G+",
	"EDesBi44W6khqKiOVgtUpboTy0zSIvOnNysLk/ya41xG5DfDiRKcVyqiIQT4yvhM5Iazcr2pPP+WXi/V",
	"3/WLDr8CEVADwr26cz+PAQKNPMkP7nUIOgIuJ0mhgyXatG0jJoycWV9CaoheeShIgiYcECz0IfOHAZZi",
	"QKzAf5TESq9GH9ahZHU+xBXVOjkS5dXMeE1cOVJt2HLBHZWbyHxqh8AeyEeJBJGoLFBach12Qm4oK4UD",
	"KUduVRyY3kCApN6aG72hz3CqVHZQSIxrRP1tjAK1q6cpxhpxwG4/ACKtD1iIO+kisJB5O7mD5siTfPRd",
	"vcrYTrOOgpMZrm7ypcYTYZ1LwfOuvJxh1D+2IVbVLVGH7xihknwsiBILlLBgyE/jdEG44k+gBCiW7COx",
	"9SKhE42jQBTNHIbedIJqffBcDFuY6yxqE5Y6/1q88NenL7ZxtrdSEL4saJflbaA4NshA19i8OXtsjdZY",
	"wYGjs8VvCGdMfWtpyqZfmfSkHNxvLj4Z8KilBOxT04m+kSuBJK0kkripcZXhtXCUSrsRJdvmyIlYQHAf",
	"mIEV16nD2gKGMqsuRKT82+oI/V7mIUpCzCcFYdhL554NCptmMRERzLlXDGeu2WOBhSLjjNyoq8j1gTQY",
	"NAsMDqeOLqwjBATQny4vz9DfX1wCr4c/zklKOUnk3Ewr0BYCarVv+z/PNQY5Qpxl7CDIKwAq5ARKE+q2",
	"BdlfbgjlaMuuFOm+rTSOcIzLx7BQ4oHFsl9Ha9FEzzgnmQYJXaGckDTicbck3Z7pzKcYDba/k5xoo9Xp",
	"5RkqtJxcwbbfsRbEjGlbO44h7G3w/c2ZDRDzsdTlJ3WI/UuaScJ7g57POj+GcJbQC4s0yGiLkhdMhMPt",
	"9HXQPp9Xxv9j5Df31tBhksJ1YZjA4FqvBIT8SascSvUmvIq3GhEQEzwvA/Cus7ox04VOy+VOHdYHx9AR",
	"IJ7FSb9NJjic+fh9dG9RXFQ7USjoxDcGLRY1jzUXXJcxPZZwc1GpUybfR8lUK2OoDKgK3TkqnXoUzdGH",
	"nXiigfgUMY4+CJZn6RM90lOjKoMyMjIY5EF11AdXEI/bYEYQPxhQRbRFqYepNNDHOF58Qgtg2FCmGB79",
	"zv6eZKNusnwdAvYGZzhfg+iO05RUqUMQDRUzW+CgC/xyQ9TlWqnjeggnsh6JvZBkiyCkCWw95qbsMY/U",
	"Hr1hAZG1fwryWrY4dHuewO8j9q05or7EfwW3QRgEr88XFgLtT+oomDCEtD+JpN/+8MPzH90wGrZCJ4sT",
	"9MQIFCC7a6PEyeLkaR804/hpkWwgilbhnS3W/2En45UL5uiCrnOSgqcMizrWTm2tjreLh51GVMZ6fIhO",
	"uwhEp+mp1OdzdFxyrgMlZduFVb+okOKbDzv5Tb+45CxuCiBwrqUKVkODjl6Z4P9mvI5cSvJRRmL5aY/1",
	"BOSNKnsJA3pqE7cjhysB2MSMQtwhW7NA1JHGvX6gqEU5cIBtDcsgAAfembVNiNjVDHqkQh0nIdUV9Svr",
	"hrZ+lTRLjaWWcRK2DaAn5y+P//LX7398qpUrTWbwkTFzacVG2xmsNwL0W388sL7NY/5oGhYvzVNBEk7C",
	"B92yncStFrcMl/ZncP2fzfXZuZwzbh7cQHZyxkmBOQGnjLopjyLyY0w+M98j7dWBvBHfaDXeT/ZwjsgO",
	"92+vbexNHaigJEqtOr+bKB333aTbiHVP6BBySQ86vvtBhX57yABciIboesgQdx5qrvCNaPAFnwHYzwdU",
	"/OE1hndJNk3iAn1UbEi6DA43fgNnR+fdy47ZOrw0HoimN3YNgsoiYdu22ZN3hRm3rHqrjO1G0aK+z6xC",
	"mL7M2A4k8E7NsjqHaQwTAgaQYfg6Evk79L0Aog/IMcJlSkme6GWG5dV36qV3E2OHNi6KtLKHGd9F8LzS",
	"EFKcaEzQVX2MB87Rd2uXFJQqGJUEfvvcpQ0Geokk2fwET40PbBQEKnPN8m7ZXOd2nL60rkGUGKbhPzkb",
	"6+OyUr0FUJqLmY0TCtBZTRq3palzIspMjqaseO7WV5QK9RAJPzW1tag47M6labKMDabFb6+khc75CZCU",
	"5IEyG5fnr18gunKjcUzC2p5IhG8wzfBVRiz0jOXu9MzW39O+cdCTrQ+ojjmSTH+Amgl5iOZCEpw20nor",
	"D+WTE7IinPsnq26tpwPiqhMXpyuAuGC00OiiB4PWw6mi26buI/mKkiwVI8VIZ6kdcw22Pp+VYhOSsYfo",
	"B6XYNKRA83HXlfk1aQaxwNBY8UgXU3rgNhRjQNQcL47DZ4NF8K4ESZMDm5fbK3A8Y9msDlAlSprryyr1",
	"r88Xbu4k5KIVzFQPMQmTOp7Z/aJOuxTI8OiUCqX6OtlYwQDpq1JqFiP3BU1wlu11rGCG1YwZFE/hEj0h",
	"8/V8iq6I3BGSox/Aq/mXZ8/sQp/GSitq+T5o9GluAiRxBW0d5BSK6q4C/piSPAyHBJCJKpVvVgoo2Eg4",
	"MbmzGr6iIAlA0XOrtgNVwoEYvSYkd6tewcoGfscQc6jJ7ZysqZCEg4qlw7p7SiLWMeZVUI8awsT66Tp4",
	"o0smXui0yaOL48XCjAHuaw2d2xbl+6nc4nzGCU7hZtSjQ9CS857FZz1rZZ5OyVW5Xocn7yve2AvUO5xO",
	"lOl3n0u8CIO2bIVdUQ0AmuRnKJfEvMAurdAYllQ7E0iezsBEaKLDPGLoik4NUvjr81d2CRBcsyNXqMBr",
	"YvT4cLZpj/4CRtNEdukFti6bV15ph/dC6/vwPSoIKzJiEZ8qaFWxbXr6qcMTyRbTDOE05VB+blyMUx09",
	"2bXqGh38uEk/kUQxuixjuyqas4o7sTkt4jAQzThF4SQXmEpntgTC48Zt88PuWsQyT74R+kZ8S67QL2SP",
	"LohEKUtK0BNM7TJTVdetOpfYj2u/Urg2opq7FwftpWAdLUlwaU9+fvvLU2+Bt1maXyCpd2lGRDCXlrrM",
	"wKNR1QeM00PBMprsh00ApiGho0E3PqcoOL3ByR7p4eqzaVQCtSUcU1JkbA9vML7GeR0jmGW6nmApiJgi",
	"TgBiU5AXlEiSMUEEKggXEEMCQYRhnUoHS6mNdVGNJQb7vg5fX1Q8oAFBVAUTgmIGJFUlsLfJxiHFcbTg",
	"2aKHUb0XQ9om/ATnEKRpfo1YcAPMYDwhR6JJQ7XHRYETMqvzDm0GuVMVLr6VVm2S/rLZbCV3mIdjJ45Q",
	"mdM/Sq+IqMF+EF/R69eLk6cIC6E9u175bJSSG5KpexYxjuw8mrjFhvAqPs4Xngzcgab8CqAGt+xA+r5N",
	"9znemiuFG1EhYv+rtnpDuAgKS0fIPAps2Ef7ehnVm7CXdy5AI14ZXcTbbhTs96YwaThSV4eC2TTNUO5i",
	"tThtr+jC3ZzlZIo8X95Syf7N366woMkc/cZyUkXPq1kMb9YvC/QkB60G4aIQUxs0qf546pR0z5lEG3wD",
	"ya+cSFHFOB8GJw3DTNyZIUvCt2DcFCa7rGLJjbNtcGgd589xIksw++iQTbGhRaW9eYKeSfr3RvNfAAOT",
	"8Fs5+Fdod/xGh0x8J7G6N/cTnO41mSn0w1Usrc3RaErhPY7wYFptT225aoClNksGU5wulfqOpUFEV+Kr",
	"iXuHRdtl4FZR+ipVgzpGIAg8/djo8lVWthulDRlMdW6jXaSfG85CLKV3VZ1ZZ9Ej0d9qu4keQF0az6Bp",
	"g/lZcRH9qPOoHtWmR7XpUW16VJse1aZHtelRbXpUmx7Vpn97tcnzt7cjWj0tohPPfAnqfY9CNtrRMST8",
	"Z0C5yTp97LF0aSihLFQwdBjwB3rLLyTjt6pzJiTjo4ucsTQcTdwZavzloiydaAVYqgP0bjjdEdgj6ljd",
	"BuwdFaX6tjcuLPR1kWJJmolNUWTqfL1y1OuuWToDWn2gdv/mOFoTsQ5SCmZs3j1Py+T4rGhGIjOYp29q",
	"GaQ3KceM1vp26u8nsHoHR7vBP/AM3+CMqmHOanwg6UCecKO/NYVFWuUR1K1Z0Hz+WPzwsfjhV1/8MGDZ",
	"CZY0QA0sH1kUAZrbGaLo4xLtBTnE30u3d6f//iC62zKAx8bSX6SxdLyA1WkBFyqJp2YFu51Zy0XjsM0H",
	"Y8wnkTwBr8xN2l8NpBbgqjW0MmH6MXwoqRBOV3ung9eGQBvgYNS+fjkYlO3oQytMs5ITlKihkMHpUIY8",
	"Sa5D2fHqK9hnPAYv1gB5S4QwXRpvlUv+xnknzqqbKi5sxK4sOJF7ch0AHxye3Rykr6aGc2Lu6rokzz+r",
	"+sXAqhBNCLhlISLx/h2HMK40S2zuzqIRN03aeeiaEfdUhOFzHGpD6hh0Am7IdVxxGC8bRPThsaKq4Y3F",
	"u4iyK9siuqGRIHGzNoZwYK/q238ZHtzJN1vUGYPJHUDbxyY9sHYj2Cg25a6hYlR+NaygXF4v5sEYbltA",
	"r5fUeSS3YZkhOAxhmu6qRrNNePQV8M3Q5u8Av7G8cwRu34p5xsi1n30GdzUYMm9Jlv2Ss11+WpB8ceJ1",
	"oA0hl3oJ6be6Ek0HVidwaoOfnn0jXIOAZ8940RnPU6cx4+R62GzNTNXOgCHHi9LVT8npqBptqlRv8O/g",
	"Ib/ct9y9FOrHV22eR3am9gwEeuE4Z/l+y0qx1I7i3j3Y8qPGoBMpoWr9W7hRGhWC7nCwTqvONZMbVkql",
	"e9vwNm2hssWYbZugcBVV1408ArFOtAPZWpXOXWd0J3L5AQn3d/zeuPeIAVrnvb91/m5qDL0PhiZQYU2N",
	"t1ut77wcwx80znUeXctpBL7RVcZ290QBtsZ6FQizs2nxthIv1J6muub+98eL4YjeWfvDrfHhA7ADXwOo",
	"EeNsA0E3nt3EebUjK3XdSKPbIDcG08Vkei65/m+auby6nHFwodp+gAUxgQBvji80yUBq7+Lk7E++PK+w",
	"TDZuJZBB87UqrH0j4k39qizdV9psWgrtzIBu+wjEIG0Xhl5wxq2jMGaKCqzukjxFf5SE7x3Dbi1HubUI",
	"Y53wUkZ03QWDivBafL1/ipDhTOD14mjw8rr87pmHNMPclx6OirorqJLbfbtu1diuESZjKsMmIoAKldun",
	"o0eoY343eMG8iBDh3EQ53pIDp17e1FQBJDjZ6Lh1yPpuR6+ZpdXurlZtGLuhdN5dxPb25PDlCaEHq2r4",
	"dIoHt2xzWR2w7sXt13d153a9M3nbdVk5caxQadio021Cl+Tn6sjr69nM3+YG9rb1e1CGhUt3xfoOCXqh",
	"Q8fdlwHyYI3zG0SsS7vcC0MP1Ym5J1SePhRT71xzuB6YKDIcKN5zFPLfOfynybbMQKi+y7WHsb1w6FhT",
	"eR4znK9LY/AbZC9wzO5m7d2pE1+5ypozWdlSbo+rvzmjfPVIGl7sgAiER33+UZ//qvV5nSGwtHmW0VwI",
	"2+UKI1EV2TbU+vPby5qptgmqSuF0CiZjYVpRDAjEv2cbQzz6+k5n1pUGIJrt1aloZQSc1LT3bpKz3FTc",
	"vUVBtEHK8BidXA1O8xXTwcCQUwhVhraYZpPDyYZkGftfkpdCXmUsmafkZjKd6ITWyaX6+W8ZS5AkeKt2",
	"BE2AJsDQDw8O/M9aSk39OWjhhiM7ukGlnCjG7xr5Tbza2++O0Zvj2dHZwu0OpSHz/RuoTitZwtxGHAfW",
	"2u5Gm+nv6h5NGU2I8UWYnR4VONmQ2bfzZ61N7na7OYbHc8bXB+ZbcfBqcfzit4sX6pu5/Kg9B66jgEJ6",
	"hENRtmspRAnqwAsdrDp5NlcTQzQByXFBJ4eT7+bPYC3qYgQUOjD7c5zKB3Uz8oLFo32FC/I6hleJTdj2",
	"s5mcMSHrtYqqBbkJ4/obS/cWg4imaico8uCD0EK1lpn6JKruoNnPnz879wbs7ttnz0ZN3lAwP7cw8/QX",
	"IDpRbreY7/sg1aapaXUca87KQhx8gv8vTj4Hzufgk/7/4uSzWtw6lJp9TiSn5MaEpQ44r7+T4HEVTmH8",
	"3yONI/+ulmpKwFL1u8KxmujNTiauRVRpf9M2gGvnYfve0TsOTyHqp8PneP/FkWLAoXShhsOAxIHpqFmL",
	"lzr21sa4hunX9pcO9gVs5iBUtbrbyDKgL/hD0HnvtPdA6rec39ygQ7DgdocwBjcKXa91BkLVTElbgCX/",
	"nDnF38MIYiq9WiEq2NjAldychlVeeffAfaBHjpTrfwhsGdQp4IExZljF9iFYM7TtxK3wxIt6jFz9Jg24",
	"Cr532FfVAtwJ0/YbI5vex8bT4rddjKGKV377IRGknucLYUOzjvKo8/eKkg8+6VJsGjdFLy9onbhJKnY7",
	"N0AtDhB1vG6m2uTgoacTg9c47UjJ4Ic69J4KxXEU6DugaN3nMQclJOPj7nRI+xN3vdH7ciMf4ii653xg",
	"WuzJlhxCkreB/BhcMJk4ZOZbEXvwwaZGiGj6TunkK/lYMCAB6SEQoXfaB8aF/mySIegwHPA9SGDCUsTB",
	"pyqr9LN+ljpXtejS/UreNr7BjbuhisPs20dfv2zf/Um/Orkj4EcazpwQ98pUaHpBXO1N42wDllt4XBp7",
	"0xnkLevZEE1OSzk9IA4EtHQq1La/YkzPdbOMRyi6fbj1yc9Y9m0O8CGwmwGmgHoD8/vcwbRnOrPw7jnr",
	"fOxRNoIwl100u/RGTGCN1pcPJdWEOsD+KXYvWAhKhgqpw9DRuxVtTNuM0TR5xMuI0O74Bd2G90qOXwQt",
	"5q51m0KYm21S4WfXiEhr/rqOkM2odedVy4FYSlcycjvUt6nHlvpoM++HoqFme/kvInvEmtoPIjb3WEN3",
	"UQ/1dRLdfEeybHads11+wAqSU1f4mNXhNZUIUnCS6C7NGnvDQokdCjxQ7VM/hcf+mVt/1eQBj2FAnOkY",
	"uUDpzIuTs0Bg6dcjFkxj09QM6Z6ZlkI9xbUPGoGVcWUGzkF4UiHNkbV960icRhUB7UsNYBZNk6PGvA/D",
	"SI6S607m8X3AmnCtxNDv7xGhj5JrvwFKAH3hhQYGA8a24dSuIFYfptV0ogpJLLDZQMmWGTVnAWXhdP3J",
	"qjBiMzrHjcQNHHO1oh7C6m1xCwQAEUQ1BTS71N6B4i5DRaJj87ql5O4w5xGqEgZRSnij7aRSVSuPt43y",
	"ELDAPN7OaWrKPJovU4TXSlSQKMOyY0MsJcs6e/GOuzKld2DNO1zXDdF71DurJhu2pLoO38gzDRbzsZVa",
	"tfevFITP8NpUwvYK67olXStDa8HJDWWlyPaICIl1dc7UxNLGpjSFvp1KPl4Vz4IzoC/GdW7DFl/b16M9",
	"tMIUUdesHQ8sHcdUhdzDinom1IVaxyFIjliB/yhtDSqvPHlVkXyLqY4ihBIkXuFI69jAeYoSnGVXOLnW",
	"InIQ9FVrTVlXRTd1X83pGkg7iKCG9LFBT1AHL178dPr61UklYpuk7RtT6jvhTIiZoLJe7YrxNdHGiCAg",
	"q0orgwH5IldEktbBtfEQ8ITlN2QvTBi3/s2pde5c6upvk3y1w6YyKLtSJzFHv5aZpEUWncRROTQ17BU6",
	"gRy59L1Q1RF6B0ZzyO9RW9naqRp6fQh04XpHo0CpA4i+EahOy81JIm2o3OvzV/r8zd9Qlt7GwKZUJOwG",
	"QlsNFQOvk4RvaU4cgH6jQFTgK5pRCGpW+FuV752j8xfHp7/++uK3kxcnChJVXKZb6rKTFm2qmZZlb0mT",
	"YBndgEOpxoRfj/4B21XkWHf3s7SncaSQdEv/SSpK+kYg8rEgHPr83sPuoOrXRqfmjQpXAcZrchbctrxV",
	"3Lg5NltZmnyUtsR1Qz0nfI6OzFBVpX6vRFZdrr/AQujaVKb/r9HtQU90+y9WN35tJKghbyI5edPf75bj",
	"UjPBJ2YEXbTJLNNjZO3dXNbzQmU5ia/BAMEU+2elrcZrK0HZprvrEiupkOgFME7XNFePzV6oaa3Bpyhh",
	"ZZYqrqCUAykVp46cr7v4Wx2xE5MNi67bFeiQQ+xVqVbbaNbhDl0fHTX/egr+0XSmA+P1zzPLJ/BVRkzp",
	"v3cTmwVGhJJ2rVz5btLO7alYJhRE++ny8uwCXUF9v9fnr8INP985rTGgsmBH89IqvB5nnOB0rwtQm0qK",
	"dasXQNS6grdtU0F1SXVuwqoa3yms0G/+v//zfwWqzRkoY3Xph05Je6lBORkTRvbds287lLiPs91uN1sx",
	"vp2VPCP6LvW1unC93XAVvZAAouv3k5xUtTS7sSzwNWhEpi8KtI/N9givAC0AtY1DRglMVNK1tfBxKq7V",
	"NZoRfB2pYx8uXVcVBaQrg0LwooeQSqY3SbsWOZ0o67asCnsjH3FiU8dGNNlvVuqxdRr7zOEvWZmnQYW6",
	"J1QnoFYPCcq5Z/PIg0fcuJEvX8S6GihNpebzBtzJoNOjwoV+q1/D/Np9rjQtxhtemwnvnX7fYSZWePrm",
	"2y9oVL29OdXbkY1D8rKxb2tRTf9FLKq3wqpOc/49G++/KKY9mu8fFNkKzON3UtUULk9tGHG4Bbw2g2R7",
	"Wyi7JRwqTXVNpGi21q8bBoHA7ej/WLT7xtsm8Y4KacdrTdxtVg42fx8XFzVa/BtYVblllPkXN8iMKR4e",
	"NbIHWux5BunDr8N03rPMaFOiW5jEO5t6/PtaOCpDxNds3ejsJBemin9hN0V33ngwarbbExiuqB6Ga49H",
	"Y6hW/OiyCDdh2ATTwL8yY3K0ml2kLs1/OV9At8mk6ST3+qD512zIsNK2CTy/1wyQlhgXD5I41m2mdXzG",
	"D4Fys/qS/Y1JdKR7csKrz7+LtglEL3JJ5R5dMoZeYb4m8MG3PwaYCWPoV5zvLdxFyPCg93MbE5Mxp7my",
	"fCsTS70QhtWDybw0XYKRKmDvOjE1HeoKfMa+5VRZADtfoblexdIqs3At7r4504ONYckXsrqSw0oNVAtk",
	"3LYfDDZiKGLbsyuql81yaEy9ZRz0OlsEwC0ZLCLFl/tJKpDVdFEq9qFW+UPo8UtdVr2Z624EJlFebWnb",
	"HGuVNeZKx5yV643Ss5sYelO4GGpvnnhokaIA+xZAf4PzNNN9CW0FxzrmVPFXN09VX41M3UUlQaw0aaxV",
	"SFMkQ1Fpg+d2aT3av9PlrU6WddKBYmEodzMGWIdWl9P/9qny3z0LcjcDkACPcoDVwY8qsui0drvdcuH8",
	"dC160A6w0v85ERvz2DqPKpN4UzXWJ+N67jZYGE1XKWPg9BAlTLkqswhyhzEEaPnh2GSHymv9KVPrUKm9",
	"kuBscximLYIS9REpvCmzTPEdiyhBjXSIigHAbvth7jTvsiqHHtLX+b6QbM1xsbHdh3Gesq3XjNbR+Szr",
	"JnHtwkq7GsEcsb53tXVNt8H6R7szd0QbGdTqzEML+wWwuCHL79YnWyj3zvug5cozV1zaYxwxXXopt4Wu",
	"LIi0ySHRfWR61x5v3haHiW11BsvlVft0bXWo1JX+2RuSsYMF74df0/cUE6zYGLClvjyDKhi5UVwUp6h2",
	"3bXYvFd4rpvXdzorbIvwx/Se1h2rASO8juo4d4qeGVZfMfU3xxdRBhuSavQE2or/QG7gYPvqDn/w84ed",
	"eaDu9+whV9Ebq99DeXZIgwjV8YUp0F6ZfmZdsz5E3WAlrB1Cm5NH3fBRN+zTDa/2ternJv35qYna7uX1",
	"6YFrOKwsOk1w4hj9SX6EEmoZpltHhfTR2FblWjhfQpWdB8h8h5W4me9uEbDSVl28Rbm5PjCviTQ1Nmvl",
	"xpjdjdrd6qYb6jbUfRmfgM27rgMTvhfVmYx3PFcHPD6DXXfR6pclTqzJvoKiW2jgwYSKN43Z0M0XECva",
	"merNXn4Plaoe7D350AU+Yn0KB9X1aHauHMCFHj6v/d8XWauMaZomDs/+Elnhb86+BLY2phyFrF/8vh2G",
	"6e4s98CQ/xQU/zPYsSvMPSg/brW2/CIcOdj6cARPLnzwhHBVfQb6rsawuhTz4cFBxhKcbZiQh//x7K/P",
	"JupAzBBNnNBm+5m2DaZoy1KSNdynzZySSRuz7LoGjlNtI2De1x77DcGZ3CDbSdZ8p3/VP35+//n/BwAA",
	"//8XmN3CyfoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
