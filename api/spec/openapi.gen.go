// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
