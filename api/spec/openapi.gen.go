// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
