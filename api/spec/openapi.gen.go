// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
