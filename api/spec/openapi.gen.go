// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
