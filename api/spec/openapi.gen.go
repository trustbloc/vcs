// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
