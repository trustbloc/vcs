// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/qv+4+Onx/8LAAD//3WCD5+jlwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
