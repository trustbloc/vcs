// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
