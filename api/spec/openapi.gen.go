// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tZh++lf94937u/8OAAD//8p9RCN1xwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
