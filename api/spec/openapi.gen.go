// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9P8DAAD//3DsPXafBgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
