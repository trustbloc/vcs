// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
