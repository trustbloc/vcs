// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
