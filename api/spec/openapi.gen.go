// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"D/8XAAD//+EryxPxkwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
