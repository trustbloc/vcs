// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QkcQnfOTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
