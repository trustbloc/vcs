// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///c1EFH8PgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
