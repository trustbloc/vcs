// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
