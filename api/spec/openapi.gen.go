// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"LCVW9nNLcD1+fvzfAAAA//8hGwhQFpYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
