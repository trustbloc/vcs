// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XUqBmdZ+XX0WtHu7+18AAAD//6jMvz04QgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
