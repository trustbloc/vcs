// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
