// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
