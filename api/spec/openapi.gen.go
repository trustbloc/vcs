// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
