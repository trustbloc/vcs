// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
