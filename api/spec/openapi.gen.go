// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bUH7J5YAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
