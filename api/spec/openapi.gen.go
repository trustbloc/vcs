// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
