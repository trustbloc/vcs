// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"v//fAAAA//+4sSmyf78AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
