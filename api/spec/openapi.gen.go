// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0+P/BQAA///+OcEhK6cAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
