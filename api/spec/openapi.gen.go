// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
