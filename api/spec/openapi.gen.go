// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//65Glzd7xQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
