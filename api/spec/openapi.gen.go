// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/6ZEAnq61gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
