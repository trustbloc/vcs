// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+Lr/RZhsAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
