// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
